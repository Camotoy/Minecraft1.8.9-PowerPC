From 12728d47485b7fb44bf5d9bc0125747834578e3f Mon Sep 17 00:00:00 2001
From: Camotoy <20743703+Camotoy@users.noreply.github.com>
Date: Thu, 28 Oct 2021 16:55:42 -0400
Subject: [PATCH] Compiles and runs a game

---
 .../net/minecraft/client/Minecraft.java       |  28 +-
 .../minecraft/client/audio/SoundManager.java  |   6 +-
 .../client/entity/AbstractClientPlayer.java   |   2 +-
 .../net/minecraft/client/gui/GuiMainMenu.java |   4 +-
 .../client/gui/GuiScreenAddServer.java        |  12 +-
 .../minecraft/client/gui/GuiScreenBook.java   |   4 +-
 .../net/minecraft/client/gui/GuiSleepMP.java  |   2 +-
 .../net/minecraft/client/gui/GuiWinGame.java  |   2 +-
 .../net/minecraft/client/main/Main.java       |   2 +-
 .../client/multiplayer/ServerAddress.java     |   3 +-
 .../client/network/OldServerPinger.java       |   7 +-
 .../client/renderer/EntityRenderer.java       |  17 +-
 .../client/renderer/RegionRenderCache.java    |   7 +-
 .../client/renderer/RenderGlobal.java         |  11 +-
 .../renderer/block/model/BreakingFour.java    |   3 +-
 .../renderer/block/model/FaceBakery.java      |   5 -
 .../renderer/chunk/ChunkRenderDispatcher.java |   4 +-
 .../client/renderer/chunk/RenderChunk.java    |   2 +-
 .../client/renderer/chunk/VisGraph.java       |   4 +-
 .../client/renderer/entity/RenderManager.java |   2 +-
 .../renderer/entity/RendererLivingEntity.java |   2 +-
 .../renderer/texture/TextureManager.java      |   4 +-
 .../client/renderer/texture/TextureMap.java   |   4 +-
 .../tileentity/TileEntityBannerRenderer.java  |   2 +-
 .../TileEntityRendererDispatcher.java         |   8 +-
 .../renderer/vertex/VertexFormatElement.java  |  15 +-
 .../minecraft/client/resources/Locale.java    |   6 +-
 .../client/resources/SkinManager.java         |   2 +-
 .../AnimationMetadataSectionSerializer.java   |  12 +-
 .../LanguageMetadataSectionSerializer.java    |   4 +-
 .../client/resources/model/ModelBakery.java   |  14 +-
 .../minecraft/client/shader/ShaderGroup.java  |   2 +-
 .../client/shader/ShaderManager.java          |   2 +-
 .../client/stream/BroadcastController.java    |   4 +-
 .../minecraft/client/util/JsonException.java  |   2 +-
 .../ai/attributes/AttributeModifier.java      |   4 +-
 .../minecraft/entity/player/EntityPlayer.java |  13 +-
 .../net/minecraft/nbt/JsonToNBT.java          |   2 +-
 .../net/minecraft/nbt/NBTTagString.java       |   2 +-
 .../net/minecraft/network/NetworkManager.java |  22 +-
 .../net/minecraft/network/NetworkSystem.java  |  12 +-
 .../net/minecraft/network/PacketBuffer.java   |   5 +-
 .../network/PingResponseHandler.java          |   3 +-
 .../realms/RealmsServerStatusPinger.java      |   2 +-
 .../net/minecraft/server/MinecraftServer.java |   4 +-
 .../server/management/PlayerProfileCache.java |  10 +-
 .../server/network/NetHandlerLoginServer.java |   7 +-
 src/minecraft/net/minecraft/src/Config.java   |  15 +-
 .../util/ClassInheritanceMultiMap.java        |   4 +-
 .../net/minecraft/util/JavaBackportUtil.java  | 139 ++++
 .../minecraft/util/ObjectIntIdentityMap.java  |   2 +-
 .../net/minecraft/util/StringTranslate.java   |   6 +-
 .../net/minecraft/world/LockCode.java         |   2 +-
 .../world/chunk/storage/AnvilChunkLoader.java |   4 +-
 .../world/gen/ChunkProviderServer.java        |   4 +-
 .../structure/StructureMineshaftPieces.java   |   2 +-
 src/minecraft/net/optifine/BlockPosM.java     |  10 +-
 .../net/optifine/ConnectedProperties.java     |   2 +-
 .../net/optifine/ConnectedTextures.java       |  26 +-
 src/minecraft/net/optifine/CustomColors.java  |  34 +-
 .../net/optifine/CustomGuiProperties.java     |   3 +-
 .../net/optifine/CustomItemProperties.java    |  16 +-
 src/minecraft/net/optifine/CustomItems.java   |  20 +-
 .../net/optifine/CustomPanorama.java          |  10 +-
 src/minecraft/net/optifine/Lang.java          |   6 +-
 src/minecraft/net/optifine/Mipmaps.java       |   6 +-
 src/minecraft/net/optifine/SmartLeaves.java   |   2 +-
 .../net/optifine/TextureAnimation.java        |   4 +-
 .../net/optifine/TextureAnimations.java       |   2 +-
 .../net/optifine/config/ConnectedParser.java  |  13 +-
 .../net/optifine/config/NbtTagValue.java      |   3 +-
 .../entity/model/CustomEntityModels.java      |  22 +-
 .../net/optifine/expr/ExpressionParser.java   |  29 +-
 .../net/optifine/gui/GuiMessage.java          |   2 +-
 .../net/optifine/gui/GuiScreenCapeOF.java     |   4 +-
 .../net/optifine/gui/TooltipManager.java      |   4 +-
 .../net/optifine/http/HttpPipeline.java       |   2 +-
 .../optifine/http/HttpPipelineReceiver.java   |   3 +-
 .../net/optifine/http/HttpPipelineSender.java |   4 +-
 .../net/optifine/http/HttpUtils.java          |   3 +-
 .../net/optifine/model/ModelUtils.java        |  10 +-
 .../net/optifine/player/CapeUtils.java        |   2 +-
 .../net/optifine/shaders/BlockAliases.java    |   3 +-
 .../net/optifine/shaders/EntityAliases.java   |   3 +-
 .../net/optifine/shaders/ItemAliases.java     |   3 +-
 .../net/optifine/shaders/ProgramStack.java    |   7 +-
 .../net/optifine/shaders/SVertexBuilder.java  |   1 +
 .../net/optifine/shaders/ShaderPackZip.java   |   7 +-
 .../net/optifine/shaders/Shaders.java         |  46 +-
 .../net/optifine/shaders/ShadersTex.java      |   2 +-
 .../shaders/config/MacroProcessor.java        |   2 +-
 .../optifine/shaders/config/MacroState.java   |   9 +-
 .../shaders/config/ShaderPackParser.java      |  21 +-
 .../net/optifine/util/ArrayCache.java         |   5 +-
 .../net/optifine/util/CacheObjectArray.java   |   5 +-
 .../net/optifine/util/ChunkUtils.java         |   2 +-
 .../net/optifine/util/FontUtils.java          |   3 +-
 .../net/optifine/util/IteratorCache.java      |   9 +-
 .../net/optifine/util/LinkedList.java         |  30 +-
 .../net/optifine/util/LinkedListTest.java     |   5 +-
 .../net/optifine/util/NativeMemory.java       |   6 +-
 src/minecraft/net/optifine/util/ResUtils.java |   2 +-
 src/minecraft/optifine/AccessFixer.java       | 204 ------
 src/minecraft/optifine/Differ.java            | 232 -------
 src/minecraft/optifine/Installer.java         | 629 ------------------
 src/minecraft/optifine/InstallerFrame.java    | 581 ----------------
 .../optifine/OptiFineClassTransformer.java    | 209 ------
 .../optifine/OptiFineForgeTweaker.java        |  44 --
 .../OptiFineTransformationService.java        | 139 ----
 .../optifine/OptiFineTransformer.java         | 344 ----------
 src/minecraft/optifine/OptiFineTweaker.java   |  47 --
 src/minecraft/optifine/Patcher.java           | 244 -------
 src/minecraft/optifine/Utils.java             |   2 +-
 src/minecraft/optifine/json/JSONValue.java    |   6 +-
 src/minecraft/optifine/json/JSONWriter.java   |   2 +-
 115 files changed, 522 insertions(+), 3048 deletions(-)
 create mode 100644 src/minecraft/net/minecraft/util/JavaBackportUtil.java
 delete mode 100644 src/minecraft/optifine/AccessFixer.java
 delete mode 100644 src/minecraft/optifine/Differ.java
 delete mode 100644 src/minecraft/optifine/Installer.java
 delete mode 100644 src/minecraft/optifine/InstallerFrame.java
 delete mode 100644 src/minecraft/optifine/OptiFineClassTransformer.java
 delete mode 100644 src/minecraft/optifine/OptiFineForgeTweaker.java
 delete mode 100644 src/minecraft/optifine/OptiFineTransformationService.java
 delete mode 100644 src/minecraft/optifine/OptiFineTransformer.java
 delete mode 100644 src/minecraft/optifine/OptiFineTweaker.java
 delete mode 100644 src/minecraft/optifine/Patcher.java

diff --git a/src/minecraft/net/minecraft/client/Minecraft.java b/src/minecraft/net/minecraft/client/Minecraft.java
index 0e9d628..1e84c09 100644
--- a/src/minecraft/net/minecraft/client/Minecraft.java
+++ b/src/minecraft/net/minecraft/client/Minecraft.java
@@ -35,6 +35,8 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.imageio.ImageIO;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.audio.MusicTicker;
@@ -323,7 +325,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage
     private ResourceLocation mojangLogo;
     private final MinecraftSessionService sessionService;
     private SkinManager skinManager;
-    private final Queue < FutureTask<? >> scheduledTasks = Queues. < FutureTask<? >> newArrayDeque();
+    private final Queue < FutureTask<? >> scheduledTasks = PlatformDependent.newArrayDeque();
     private long field_175615_aJ = 0L;
     private final Thread mcThread = Thread.currentThread();
     private ModelManager modelManager;
@@ -2799,20 +2801,20 @@ public class Minecraft implements IThreadListener, IPlayerUsage
         playerSnooper.addStatToSnooper("client_brand", ClientBrandRetriever.getClientModName());
         playerSnooper.addStatToSnooper("launched_version", this.launchedVersion);
         ContextCapabilities contextcapabilities = GLContext.getCapabilities();
-        playerSnooper.addStatToSnooper("gl_caps[ARB_arrays_of_arrays]", Boolean.valueOf(contextcapabilities.GL_ARB_arrays_of_arrays));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_base_instance]", Boolean.valueOf(contextcapabilities.GL_ARB_base_instance));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_arrays_of_arrays]", Boolean.valueOf(contextcapabilities.GL_ARB_arrays_of_arrays));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_base_instance]", Boolean.valueOf(contextcapabilities.GL_ARB_base_instance));
         playerSnooper.addStatToSnooper("gl_caps[ARB_blend_func_extended]", Boolean.valueOf(contextcapabilities.GL_ARB_blend_func_extended));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_clear_buffer_object]", Boolean.valueOf(contextcapabilities.GL_ARB_clear_buffer_object));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_clear_buffer_object]", Boolean.valueOf(contextcapabilities.GL_ARB_clear_buffer_object));
         playerSnooper.addStatToSnooper("gl_caps[ARB_color_buffer_float]", Boolean.valueOf(contextcapabilities.GL_ARB_color_buffer_float));
         playerSnooper.addStatToSnooper("gl_caps[ARB_compatibility]", Boolean.valueOf(contextcapabilities.GL_ARB_compatibility));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_compressed_texture_pixel_storage]", Boolean.valueOf(contextcapabilities.GL_ARB_compressed_texture_pixel_storage));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_compute_shader]", Boolean.valueOf(contextcapabilities.GL_ARB_compute_shader));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_compressed_texture_pixel_storage]", Boolean.valueOf(contextcapabilities.GL_ARB_compressed_texture_pixel_storage));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_compute_shader]", Boolean.valueOf(contextcapabilities.GL_ARB_compute_shader));
         playerSnooper.addStatToSnooper("gl_caps[ARB_copy_buffer]", Boolean.valueOf(contextcapabilities.GL_ARB_copy_buffer));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_copy_image]", Boolean.valueOf(contextcapabilities.GL_ARB_copy_image));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_copy_image]", Boolean.valueOf(contextcapabilities.GL_ARB_copy_image));
         playerSnooper.addStatToSnooper("gl_caps[ARB_depth_buffer_float]", Boolean.valueOf(contextcapabilities.GL_ARB_depth_buffer_float));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_compute_shader]", Boolean.valueOf(contextcapabilities.GL_ARB_compute_shader));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_compute_shader]", Boolean.valueOf(contextcapabilities.GL_ARB_compute_shader));
         playerSnooper.addStatToSnooper("gl_caps[ARB_copy_buffer]", Boolean.valueOf(contextcapabilities.GL_ARB_copy_buffer));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_copy_image]", Boolean.valueOf(contextcapabilities.GL_ARB_copy_image));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_copy_image]", Boolean.valueOf(contextcapabilities.GL_ARB_copy_image));
         playerSnooper.addStatToSnooper("gl_caps[ARB_depth_buffer_float]", Boolean.valueOf(contextcapabilities.GL_ARB_depth_buffer_float));
         playerSnooper.addStatToSnooper("gl_caps[ARB_depth_clamp]", Boolean.valueOf(contextcapabilities.GL_ARB_depth_clamp));
         playerSnooper.addStatToSnooper("gl_caps[ARB_depth_texture]", Boolean.valueOf(contextcapabilities.GL_ARB_depth_texture));
@@ -2822,8 +2824,8 @@ public class Minecraft implements IThreadListener, IPlayerUsage
         playerSnooper.addStatToSnooper("gl_caps[ARB_draw_indirect]", Boolean.valueOf(contextcapabilities.GL_ARB_draw_indirect));
         playerSnooper.addStatToSnooper("gl_caps[ARB_draw_instanced]", Boolean.valueOf(contextcapabilities.GL_ARB_draw_instanced));
         playerSnooper.addStatToSnooper("gl_caps[ARB_explicit_attrib_location]", Boolean.valueOf(contextcapabilities.GL_ARB_explicit_attrib_location));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_explicit_uniform_location]", Boolean.valueOf(contextcapabilities.GL_ARB_explicit_uniform_location));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_fragment_layer_viewport]", Boolean.valueOf(contextcapabilities.GL_ARB_fragment_layer_viewport));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_explicit_uniform_location]", Boolean.valueOf(contextcapabilities.GL_ARB_explicit_uniform_location));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_fragment_layer_viewport]", Boolean.valueOf(contextcapabilities.GL_ARB_fragment_layer_viewport));
         playerSnooper.addStatToSnooper("gl_caps[ARB_fragment_program]", Boolean.valueOf(contextcapabilities.GL_ARB_fragment_program));
         playerSnooper.addStatToSnooper("gl_caps[ARB_fragment_shader]", Boolean.valueOf(contextcapabilities.GL_ARB_fragment_shader));
         playerSnooper.addStatToSnooper("gl_caps[ARB_fragment_program_shadow]", Boolean.valueOf(contextcapabilities.GL_ARB_fragment_program_shadow));
@@ -2834,7 +2836,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage
         playerSnooper.addStatToSnooper("gl_caps[ARB_half_float_pixel]", Boolean.valueOf(contextcapabilities.GL_ARB_half_float_pixel));
         playerSnooper.addStatToSnooper("gl_caps[ARB_half_float_vertex]", Boolean.valueOf(contextcapabilities.GL_ARB_half_float_vertex));
         playerSnooper.addStatToSnooper("gl_caps[ARB_instanced_arrays]", Boolean.valueOf(contextcapabilities.GL_ARB_instanced_arrays));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_map_buffer_alignment]", Boolean.valueOf(contextcapabilities.GL_ARB_map_buffer_alignment));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_map_buffer_alignment]", Boolean.valueOf(contextcapabilities.GL_ARB_map_buffer_alignment));
         playerSnooper.addStatToSnooper("gl_caps[ARB_map_buffer_range]", Boolean.valueOf(contextcapabilities.GL_ARB_map_buffer_range));
         playerSnooper.addStatToSnooper("gl_caps[ARB_multisample]", Boolean.valueOf(contextcapabilities.GL_ARB_multisample));
         playerSnooper.addStatToSnooper("gl_caps[ARB_multitexture]", Boolean.valueOf(contextcapabilities.GL_ARB_multitexture));
@@ -2846,7 +2848,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage
         playerSnooper.addStatToSnooper("gl_caps[ARB_shader_texture_lod]", Boolean.valueOf(contextcapabilities.GL_ARB_shader_texture_lod));
         playerSnooper.addStatToSnooper("gl_caps[ARB_shadow]", Boolean.valueOf(contextcapabilities.GL_ARB_shadow));
         playerSnooper.addStatToSnooper("gl_caps[ARB_shadow_ambient]", Boolean.valueOf(contextcapabilities.GL_ARB_shadow_ambient));
-        playerSnooper.addStatToSnooper("gl_caps[ARB_stencil_texturing]", Boolean.valueOf(contextcapabilities.GL_ARB_stencil_texturing));
+        //playerSnooper.addStatToSnooper("gl_caps[ARB_stencil_texturing]", Boolean.valueOf(contextcapabilities.GL_ARB_stencil_texturing));
         playerSnooper.addStatToSnooper("gl_caps[ARB_sync]", Boolean.valueOf(contextcapabilities.GL_ARB_sync));
         playerSnooper.addStatToSnooper("gl_caps[ARB_tessellation_shader]", Boolean.valueOf(contextcapabilities.GL_ARB_tessellation_shader));
         playerSnooper.addStatToSnooper("gl_caps[ARB_texture_border_clamp]", Boolean.valueOf(contextcapabilities.GL_ARB_texture_border_clamp));
diff --git a/src/minecraft/net/minecraft/client/audio/SoundManager.java b/src/minecraft/net/minecraft/client/audio/SoundManager.java
index ab9c2b0..8fdef99 100644
--- a/src/minecraft/net/minecraft/client/audio/SoundManager.java
+++ b/src/minecraft/net/minecraft/client/audio/SoundManager.java
@@ -107,21 +107,21 @@ public class SoundManager
                         {
                             public void message(String p_message_1_, int p_message_2_)
                             {
-                                if (!p_message_1_.isEmpty())
+                                if (p_message_1_.length() != 0)
                                 {
                                     SoundManager.logger.info(p_message_1_);
                                 }
                             }
                             public void importantMessage(String p_importantMessage_1_, int p_importantMessage_2_)
                             {
-                                if (!p_importantMessage_1_.isEmpty())
+                                if (p_importantMessage_1_.length() != 0)
                                 {
                                     SoundManager.logger.warn(p_importantMessage_1_);
                                 }
                             }
                             public void errorMessage(String p_errorMessage_1_, String p_errorMessage_2_, int p_errorMessage_3_)
                             {
-                                if (!p_errorMessage_2_.isEmpty())
+                                if (p_errorMessage_2_.length() != 0)
                                 {
                                     SoundManager.logger.error("Error in class \'" + p_errorMessage_1_ + "\'");
                                     SoundManager.logger.error(p_errorMessage_2_);
diff --git a/src/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java b/src/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java
index 80bcb68..15d0601 100644
--- a/src/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java
+++ b/src/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java
@@ -37,7 +37,7 @@ public abstract class AbstractClientPlayer extends EntityPlayer
         super(worldIn, playerProfile);
         this.nameClear = playerProfile.getName();
 
-        if (this.nameClear != null && !this.nameClear.isEmpty())
+        if (this.nameClear != null && this.nameClear.length() != 0)
         {
             this.nameClear = StringUtils.stripControlCodes(this.nameClear);
         }
diff --git a/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java b/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java
index 0cf6a50..81abb1d 100644
--- a/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java
+++ b/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java
@@ -30,7 +30,7 @@ import net.minecraft.world.storage.WorldInfo;
 import net.optifine.CustomPanorama;
 import net.optifine.CustomPanoramaProperties;
 import net.optifine.reflect.Reflector;
-import org.apache.commons.io.Charsets;
+import com.google.common.base.Charsets;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.opengl.GL11;
@@ -110,7 +110,7 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
             {
                 s = s.trim();
 
-                if (!s.isEmpty())
+                if (s.length() != 0)
                 {
                     list.add(s);
                 }
diff --git a/src/minecraft/net/minecraft/client/gui/GuiScreenAddServer.java b/src/minecraft/net/minecraft/client/gui/GuiScreenAddServer.java
index 0fe0dba..84a4c0f 100644
--- a/src/minecraft/net/minecraft/client/gui/GuiScreenAddServer.java
+++ b/src/minecraft/net/minecraft/client/gui/GuiScreenAddServer.java
@@ -2,9 +2,9 @@ package net.minecraft.client.gui;
 
 import com.google.common.base.Predicate;
 import java.io.IOException;
-import java.net.IDN;
 import net.minecraft.client.multiplayer.ServerData;
 import net.minecraft.client.resources.I18n;
+import net.minecraft.util.JavaBackportUtil;
 import org.lwjgl.input.Keyboard;
 
 public class GuiScreenAddServer extends GuiScreen
@@ -32,15 +32,7 @@ public class GuiScreenAddServer extends GuiScreen
                 }
                 else
                 {
-                    try
-                    {
-                        String s = IDN.toASCII(astring[0]);
-                        return true;
-                    }
-                    catch (IllegalArgumentException var4)
-                    {
-                        return false;
-                    }
+                    return JavaBackportUtil.isAllASCII(astring[0]);
                 }
             }
         }
diff --git a/src/minecraft/net/minecraft/client/gui/GuiScreenBook.java b/src/minecraft/net/minecraft/client/gui/GuiScreenBook.java
index 5cfcf31..12204b9 100644
--- a/src/minecraft/net/minecraft/client/gui/GuiScreenBook.java
+++ b/src/minecraft/net/minecraft/client/gui/GuiScreenBook.java
@@ -340,7 +340,7 @@ public class GuiScreenBook extends GuiScreen
         switch (p_146460_2_)
         {
             case 14:
-                if (!this.bookTitle.isEmpty())
+                if (this.bookTitle.length() != 0)
                 {
                     this.bookTitle = this.bookTitle.substring(0, this.bookTitle.length() - 1);
                     this.updateButtons();
@@ -350,7 +350,7 @@ public class GuiScreenBook extends GuiScreen
 
             case 28:
             case 156:
-                if (!this.bookTitle.isEmpty())
+                if (this.bookTitle.length() != 0)
                 {
                     this.sendBookToServer(true);
                     this.mc.displayGuiScreen((GuiScreen)null);
diff --git a/src/minecraft/net/minecraft/client/gui/GuiSleepMP.java b/src/minecraft/net/minecraft/client/gui/GuiSleepMP.java
index 35b97a6..c44a12e 100644
--- a/src/minecraft/net/minecraft/client/gui/GuiSleepMP.java
+++ b/src/minecraft/net/minecraft/client/gui/GuiSleepMP.java
@@ -35,7 +35,7 @@ public class GuiSleepMP extends GuiChat
         {
             String s = this.inputField.getText().trim();
 
-            if (!s.isEmpty())
+            if (s.length() != 0)
             {
                 this.mc.thePlayer.sendChatMessage(s);
             }
diff --git a/src/minecraft/net/minecraft/client/gui/GuiWinGame.java b/src/minecraft/net/minecraft/client/gui/GuiWinGame.java
index 9f1a453..8c8f848 100644
--- a/src/minecraft/net/minecraft/client/gui/GuiWinGame.java
+++ b/src/minecraft/net/minecraft/client/gui/GuiWinGame.java
@@ -16,7 +16,7 @@ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.network.play.client.C16PacketClientStatus;
 import net.minecraft.util.EnumChatFormatting;
 import net.minecraft.util.ResourceLocation;
-import org.apache.commons.io.Charsets;
+import com.google.common.base.Charsets;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
diff --git a/src/minecraft/net/minecraft/client/main/Main.java b/src/minecraft/net/minecraft/client/main/Main.java
index 746794e..8c472f7 100644
--- a/src/minecraft/net/minecraft/client/main/Main.java
+++ b/src/minecraft/net/minecraft/client/main/Main.java
@@ -115,6 +115,6 @@ public class Main
 
     private static boolean isNullOrEmpty(String str)
     {
-        return str != null && !str.isEmpty();
+        return str != null && str.length() != 0;
     }
 }
diff --git a/src/minecraft/net/minecraft/client/multiplayer/ServerAddress.java b/src/minecraft/net/minecraft/client/multiplayer/ServerAddress.java
index 049e724..d4c5ef4 100644
--- a/src/minecraft/net/minecraft/client/multiplayer/ServerAddress.java
+++ b/src/minecraft/net/minecraft/client/multiplayer/ServerAddress.java
@@ -19,7 +19,8 @@ public class ServerAddress
 
     public String getIP()
     {
-        return IDN.toASCII(this.ipAddress);
+        //return IDN.toASCII(this.ipAddress); //TODO
+        return this.ipAddress;
     }
 
     public int getPort()
diff --git a/src/minecraft/net/minecraft/client/network/OldServerPinger.java b/src/minecraft/net/minecraft/client/network/OldServerPinger.java
index cedd493..1a2fede 100644
--- a/src/minecraft/net/minecraft/client/network/OldServerPinger.java
+++ b/src/minecraft/net/minecraft/client/network/OldServerPinger.java
@@ -35,10 +35,7 @@ import net.minecraft.network.status.client.C00PacketServerQuery;
 import net.minecraft.network.status.client.C01PacketPing;
 import net.minecraft.network.status.server.S00PacketServerInfo;
 import net.minecraft.network.status.server.S01PacketPong;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.EnumChatFormatting;
-import net.minecraft.util.IChatComponent;
-import net.minecraft.util.MathHelper;
+import net.minecraft.util.*;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -242,7 +239,7 @@ public class OldServerPinger
 
                             if (short1 == 255)
                             {
-                                String s = new String(p_channelRead0_2_.readBytes(p_channelRead0_2_.readShort() * 2).array(), Charsets.UTF_16BE);
+                                String s = JavaBackportUtil.newStringFromBytes(p_channelRead0_2_.readBytes(p_channelRead0_2_.readShort() * 2).array(), Charsets.UTF_16BE);
                                 String[] astring = (String[])Iterables.toArray(OldServerPinger.PING_RESPONSE_SPLITTER.split(s), String.class);
 
                                 if ("\u00a71".equals(astring[0]))
diff --git a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
index 54cfce5..bcb6855 100644
--- a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
+++ b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
@@ -56,20 +56,7 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.potion.Potion;
 import net.minecraft.server.integrated.IntegratedServer;
 import net.minecraft.src.Config;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.ChatStyle;
-import net.minecraft.util.EntitySelectors;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.MouseFilter;
-import net.minecraft.util.MovingObjectPosition;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldSettings;
@@ -2384,7 +2371,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
 
             if (Float.isInfinite(f6))
             {
-                f6 = Math.nextAfter(f6, 0.0D);
+                f6 = JavaBackportUtil.nextAfter(f6, 0.0D);
             }
 
             this.fogColorRed = this.fogColorRed * (1.0F - f15) + this.fogColorRed * f6 * f15;
diff --git a/src/minecraft/net/minecraft/client/renderer/RegionRenderCache.java b/src/minecraft/net/minecraft/client/renderer/RegionRenderCache.java
index cb45f2c..14e3abd 100644
--- a/src/minecraft/net/minecraft/client/renderer/RegionRenderCache.java
+++ b/src/minecraft/net/minecraft/client/renderer/RegionRenderCache.java
@@ -1,7 +1,8 @@
 package net.minecraft.client.renderer;
 
-import java.util.ArrayDeque;
 import java.util.Arrays;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.init.Blocks;
 import net.minecraft.src.Config;
@@ -19,8 +20,8 @@ public class RegionRenderCache extends ChunkCache
     private final BlockPos position;
     private int[] combinedLights;
     private IBlockState[] blockStates;
-    private static ArrayDeque<int[]> cacheLights = new ArrayDeque();
-    private static ArrayDeque<IBlockState[]> cacheStates = new ArrayDeque();
+    private static ArrayDequeV6<int[]> cacheLights = new ArrayDequeV6<int[]>();
+    private static ArrayDequeV6<IBlockState[]> cacheStates = new ArrayDequeV6<IBlockState[]>();
     private static int maxCacheSize = Config.limit(Runtime.getRuntime().availableProcessors(), 1, 32);
 
     public RegionRenderCache(World worldIn, BlockPos posFromIn, BlockPos posToIn, int subIn)
diff --git a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
index 107ded7..cf14e46 100644
--- a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
+++ b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
@@ -5,12 +5,10 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
 import java.io.IOException;
-import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.Deque;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
@@ -19,6 +17,9 @@ import java.util.Map;
 import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.Callable;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.BlockEnderChest;
@@ -201,9 +202,9 @@ public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListene
     public Entity renderedEntity;
     public Set chunksToResortTransparency = new LinkedHashSet();
     public Set chunksToUpdateForced = new LinkedHashSet();
-    private Deque visibilityDeque = new ArrayDeque();
-    private List renderInfosEntities = new ArrayList(1024);
-    private List renderInfosTileEntities = new ArrayList(1024);
+    private Deque<RenderGlobal.ContainerLocalRenderInformation> visibilityDeque = new ArrayDequeV6<RenderGlobal.ContainerLocalRenderInformation>();
+    private List<RenderGlobal.ContainerLocalRenderInformation> renderInfosEntities = new ArrayList<RenderGlobal.ContainerLocalRenderInformation>(1024);
+    private List<RenderGlobal.ContainerLocalRenderInformation> renderInfosTileEntities = new ArrayList<RenderGlobal.ContainerLocalRenderInformation>(1024);
     private List renderInfosNormal = new ArrayList(1024);
     private List renderInfosEntitiesNormal = new ArrayList(1024);
     private List renderInfosTileEntitiesNormal = new ArrayList(1024);
diff --git a/src/minecraft/net/minecraft/client/renderer/block/model/BreakingFour.java b/src/minecraft/net/minecraft/client/renderer/block/model/BreakingFour.java
index 046c3e2..8a12db5 100644
--- a/src/minecraft/net/minecraft/client/renderer/block/model/BreakingFour.java
+++ b/src/minecraft/net/minecraft/client/renderer/block/model/BreakingFour.java
@@ -2,6 +2,7 @@ package net.minecraft.client.renderer.block.model;
 
 import java.util.Arrays;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import net.minecraft.util.JavaBackportUtil;
 
 public class BreakingFour extends BakedQuad
 {
@@ -9,7 +10,7 @@ public class BreakingFour extends BakedQuad
 
     public BreakingFour(BakedQuad p_i46217_1_, TextureAtlasSprite textureIn)
     {
-        super(Arrays.copyOf(p_i46217_1_.getVertexData(), p_i46217_1_.getVertexData().length), p_i46217_1_.tintIndex, FaceBakery.getFacingFromVertexData(p_i46217_1_.getVertexData()));
+        super(JavaBackportUtil.arrayCopyOf(p_i46217_1_.getVertexData(), p_i46217_1_.getVertexData().length), p_i46217_1_.tintIndex, FaceBakery.getFacingFromVertexData(p_i46217_1_.getVertexData()));
         this.texture = textureIn;
         this.func_178217_e();
         this.fixVertexData();
diff --git a/src/minecraft/net/minecraft/client/renderer/block/model/FaceBakery.java b/src/minecraft/net/minecraft/client/renderer/block/model/FaceBakery.java
index 2e7b38f..22bdac2 100644
--- a/src/minecraft/net/minecraft/client/renderer/block/model/FaceBakery.java
+++ b/src/minecraft/net/minecraft/client/renderer/block/model/FaceBakery.java
@@ -20,11 +20,6 @@ public class FaceBakery
     private static final float field_178418_a = 1.0F / (float)Math.cos(0.39269909262657166D) - 1.0F;
     private static final float field_178417_b = 1.0F / (float)Math.cos((Math.PI / 4D)) - 1.0F;
 
-    public BakedQuad makeBakedQuad(Vector3f posFrom, Vector3f posTo, BlockPartFace face, TextureAtlasSprite sprite, EnumFacing facing, ModelRotation modelRotationIn, BlockPartRotation partRotation, boolean uvLocked, boolean shade)
-    {
-        return this.makeBakedQuad(posFrom, posTo, face, sprite, facing, modelRotationIn, partRotation, uvLocked, shade);
-    }
-
     public BakedQuad makeBakedQuad(Vector3f p_makeBakedQuad_1_, Vector3f p_makeBakedQuad_2_, BlockPartFace p_makeBakedQuad_3_, TextureAtlasSprite p_makeBakedQuad_4_, EnumFacing p_makeBakedQuad_5_, ITransformation p_makeBakedQuad_6_, BlockPartRotation p_makeBakedQuad_7_, boolean p_makeBakedQuad_8_, boolean p_makeBakedQuad_9_)
     {
         int[] aint = this.makeQuadVertexData(p_makeBakedQuad_3_, p_makeBakedQuad_4_, p_makeBakedQuad_5_, this.getPositionsDiv16(p_makeBakedQuad_1_, p_makeBakedQuad_2_), p_makeBakedQuad_6_, p_makeBakedQuad_7_, p_makeBakedQuad_8_, p_makeBakedQuad_9_);
diff --git a/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java b/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
index ebf6c75..7ccc206 100644
--- a/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ b/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -12,6 +12,8 @@ import java.util.Queue;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -51,7 +53,7 @@ public class ChunkRenderDispatcher
         this.queueChunkUpdates = Queues.<ChunkCompileTaskGenerator>newArrayBlockingQueue(100);
         this.worldVertexUploader = new WorldVertexBufferUploader();
         this.vertexUploader = new VertexBufferUploader();
-        this.queueChunkUploads = Queues. < ListenableFutureTask<? >> newArrayDeque();
+        this.queueChunkUploads = PlatformDependent.newArrayDeque();
         this.listPausedBuilders = new ArrayList();
         int i = Math.max(1, (int)((double)Runtime.getRuntime().maxMemory() * 0.3D) / 10485760);
         int j = Math.max(1, MathHelper.clamp_int(Runtime.getRuntime().availableProcessors() - 2, 1, i / 5));
diff --git a/src/minecraft/net/minecraft/client/renderer/chunk/RenderChunk.java b/src/minecraft/net/minecraft/client/renderer/chunk/RenderChunk.java
index f69932b..4354c9c 100644
--- a/src/minecraft/net/minecraft/client/renderer/chunk/RenderChunk.java
+++ b/src/minecraft/net/minecraft/client/renderer/chunk/RenderChunk.java
@@ -198,7 +198,7 @@ public class RenderChunk
             boolean flag = Reflector.ForgeBlock_canRenderInLayer.exists();
             boolean flag1 = Reflector.ForgeHooksClient_setRenderLayer.exists();
 
-            for (BlockPosM blockposm : BlockPosM.getAllInBoxMutable(blockpos, blockpos1))
+            for (BlockPosM blockposm : BlockPosM.ofGetAllInBoxMutable(blockpos, blockpos1))
             {
                 IBlockState iblockstate = chunkcacheof.getBlockState(blockposm);
                 Block block = iblockstate.getBlock();
diff --git a/src/minecraft/net/minecraft/client/renderer/chunk/VisGraph.java b/src/minecraft/net/minecraft/client/renderer/chunk/VisGraph.java
index e9aa75c..7aa776d 100644
--- a/src/minecraft/net/minecraft/client/renderer/chunk/VisGraph.java
+++ b/src/minecraft/net/minecraft/client/renderer/chunk/VisGraph.java
@@ -5,6 +5,8 @@ import java.util.BitSet;
 import java.util.EnumSet;
 import java.util.Queue;
 import java.util.Set;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.IntegerCache;
@@ -68,7 +70,7 @@ public class VisGraph
     private Set<EnumFacing> func_178604_a(int p_178604_1_)
     {
         Set<EnumFacing> set = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
-        Queue<Integer> queue = new ArrayDeque(384);
+        Queue<Integer> queue = PlatformDependent.newArrayDeque(384);
         queue.add(IntegerCache.func_181756_a(p_178604_1_));
         this.field_178612_d.set(p_178604_1_, true);
 
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java b/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
index 0198179..c26a60c 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
@@ -517,7 +517,7 @@ public class RenderManager
         this.renderOutlines = renderOutlinesIn;
     }
 
-    public Map<Class, Render> getEntityRenderMap()
+    public Map<Class<? extends Entity>, Render<? extends Entity>> getEntityRenderMap()
     {
         return this.entityRenderMap;
     }
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java b/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java
index 0fb2b7b..a71e7f5 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java
@@ -64,7 +64,7 @@ public abstract class RendererLivingEntity<T extends EntityLivingBase> extends R
 
     public <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer)
     {
-        return this.layerRenderers.add(layer);
+        return this.layerRenderers.add((LayerRenderer<T>) layer);
     }
 
     protected <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean removeLayer(U layer)
diff --git a/src/minecraft/net/minecraft/client/renderer/texture/TextureManager.java b/src/minecraft/net/minecraft/client/renderer/texture/TextureManager.java
index bf4ae7d..4ea1123 100644
--- a/src/minecraft/net/minecraft/client/renderer/texture/TextureManager.java
+++ b/src/minecraft/net/minecraft/client/renderer/texture/TextureManager.java
@@ -199,7 +199,7 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
 
         EmissiveTextures.update();
 
-        for (Entry<ResourceLocation, ITextureObject> entry : new HashSet(this.mapTextureObjects.entrySet()))
+        for (Entry<ResourceLocation, ITextureObject> entry : new HashSet<Map.Entry<ResourceLocation, ITextureObject>>(this.mapTextureObjects.entrySet()))
         {
             this.loadTexture((ResourceLocation)entry.getKey(), (ITextureObject)entry.getValue());
         }
@@ -207,7 +207,7 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
 
     public void reloadBannerTextures()
     {
-        for (Entry<ResourceLocation, ITextureObject> entry : new HashSet(this.mapTextureObjects.entrySet()))
+        for (Entry<ResourceLocation, ITextureObject> entry : new HashSet<Map.Entry<ResourceLocation, ITextureObject>>(this.mapTextureObjects.entrySet()))
         {
             ResourceLocation resourcelocation = (ResourceLocation)entry.getKey();
             ITextureObject itextureobject = (ITextureObject)entry.getValue();
diff --git a/src/minecraft/net/minecraft/client/renderer/texture/TextureMap.java b/src/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
index 64ec837..dcd386e 100644
--- a/src/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
+++ b/src/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
@@ -776,9 +776,9 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
     {
         Map map = new HashMap();
 
-        for (Entry entry : p_detectMinimumSpriteSize_1_.entrySet())
+        for (Object o : p_detectMinimumSpriteSize_1_.values())
         {
-            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)entry.getValue();
+            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite) o;
             ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite.getIconName());
             ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation);
 
diff --git a/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityBannerRenderer.java b/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityBannerRenderer.java
index f5ffaa4..9b50171 100644
--- a/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityBannerRenderer.java
+++ b/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityBannerRenderer.java
@@ -86,7 +86,7 @@ public class TileEntityBannerRenderer extends TileEntitySpecialRenderer<TileEnti
     {
         String s = bannerObj.func_175116_e();
 
-        if (s.isEmpty())
+        if (s.length() == 0)
         {
             return null;
         }
diff --git a/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java b/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java
index 5fd0225..ecbc24d 100644
--- a/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java
+++ b/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java
@@ -78,18 +78,18 @@ public class TileEntityRendererDispatcher
 
     public <T extends TileEntity> TileEntitySpecialRenderer<T> getSpecialRendererByClass(Class <? extends TileEntity > teClass)
     {
-        TileEntitySpecialRenderer <? extends TileEntity > tileentityspecialrenderer = (TileEntitySpecialRenderer)this.mapSpecialRenderers.get(teClass);
+        TileEntitySpecialRenderer <? extends TileEntity > tileentityspecialrenderer = this.mapSpecialRenderers.get(teClass);
 
         if (tileentityspecialrenderer == null && teClass != TileEntity.class)
         {
-            tileentityspecialrenderer = this.<TileEntity>getSpecialRendererByClass(teClass.getSuperclass());
+            tileentityspecialrenderer = this.<TileEntity>getSpecialRendererByClass((Class<? extends TileEntity>) teClass.getSuperclass());
             this.mapSpecialRenderers.put(teClass, tileentityspecialrenderer);
         }
 
-        return tileentityspecialrenderer;
+        return (TileEntitySpecialRenderer<T>) tileentityspecialrenderer;
     }
 
-    public <T extends TileEntity> TileEntitySpecialRenderer<T> getSpecialRenderer(TileEntity tileEntityIn)
+    public <T extends TileEntity> TileEntitySpecialRenderer<TileEntity> getSpecialRenderer(TileEntity tileEntityIn)
     {
         return tileEntityIn != null && !tileEntityIn.isInvalid() ? this.getSpecialRendererByClass(tileEntityIn.getClass()) : null;
     }
diff --git a/src/minecraft/net/minecraft/client/renderer/vertex/VertexFormatElement.java b/src/minecraft/net/minecraft/client/renderer/vertex/VertexFormatElement.java
index 4986be7..03bfedc 100644
--- a/src/minecraft/net/minecraft/client/renderer/vertex/VertexFormatElement.java
+++ b/src/minecraft/net/minecraft/client/renderer/vertex/VertexFormatElement.java
@@ -2,6 +2,7 @@ package net.minecraft.client.renderer.vertex;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.lwjgl.opengl.GL11;
 
 public class VertexFormatElement
 {
@@ -96,13 +97,13 @@ public class VertexFormatElement
 
     public static enum EnumType
     {
-        FLOAT(4, "Float", 5126),
-        UBYTE(1, "Unsigned Byte", 5121),
-        BYTE(1, "Byte", 5120),
-        USHORT(2, "Unsigned Short", 5123),
-        SHORT(2, "Short", 5122),
-        UINT(4, "Unsigned Int", 5125),
-        INT(4, "Int", 5124);
+        FLOAT(4, "Float", GL11.GL_FLOAT),
+        UBYTE(1, "Unsigned Byte", GL11.GL_UNSIGNED_BYTE),
+        BYTE(1, "Byte", GL11.GL_BYTE),
+        USHORT(2, "Unsigned Short", GL11.GL_UNSIGNED_SHORT),
+        SHORT(2, "Short", GL11.GL_SHORT),
+        UINT(4, "Unsigned Int", GL11.GL_UNSIGNED_INT),
+        INT(4, "Int", GL11.GL_INT);
 
         private final int size;
         private final String displayName;
diff --git a/src/minecraft/net/minecraft/client/resources/Locale.java b/src/minecraft/net/minecraft/client/resources/Locale.java
index bfb6605..45ee517 100644
--- a/src/minecraft/net/minecraft/client/resources/Locale.java
+++ b/src/minecraft/net/minecraft/client/resources/Locale.java
@@ -10,7 +10,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 import net.minecraft.util.ResourceLocation;
-import org.apache.commons.io.Charsets;
+import com.google.common.base.Charsets;
 import org.apache.commons.io.IOUtils;
 
 public class Locale
@@ -99,9 +99,9 @@ public class Locale
 
     private void loadLocaleData(InputStream p_135021_1_) throws IOException
     {
-        for (String s : IOUtils.readLines(p_135021_1_, Charsets.UTF_8))
+        for (String s : IOUtils.readLines(p_135021_1_, Charsets.UTF_8.name()))
         {
-            if (!s.isEmpty() && s.charAt(0) != 35)
+            if (s.length() != 0 && s.charAt(0) != 35)
             {
                 String[] astring = (String[])Iterables.toArray(splitter.split(s), String.class);
 
diff --git a/src/minecraft/net/minecraft/client/resources/SkinManager.java b/src/minecraft/net/minecraft/client/resources/SkinManager.java
index 6dfc178..dfd860f 100644
--- a/src/minecraft/net/minecraft/client/resources/SkinManager.java
+++ b/src/minecraft/net/minecraft/client/resources/SkinManager.java
@@ -26,7 +26,7 @@ import net.minecraft.util.ResourceLocation;
 
 public class SkinManager
 {
-    private static final ExecutorService THREAD_POOL = new ThreadPoolExecutor(0, 2, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue());
+    private static final ExecutorService THREAD_POOL = new ThreadPoolExecutor(0, 2, 1L * 60L, TimeUnit.SECONDS, new LinkedBlockingQueue());
     private final TextureManager textureManager;
     private final File skinCacheDir;
     private final MinecraftSessionService sessionService;
diff --git a/src/minecraft/net/minecraft/client/resources/data/AnimationMetadataSectionSerializer.java b/src/minecraft/net/minecraft/client/resources/data/AnimationMetadataSectionSerializer.java
index eb80721..7eb7505 100644
--- a/src/minecraft/net/minecraft/client/resources/data/AnimationMetadataSectionSerializer.java
+++ b/src/minecraft/net/minecraft/client/resources/data/AnimationMetadataSectionSerializer.java
@@ -11,6 +11,8 @@ import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
 import java.lang.reflect.Type;
 import java.util.List;
+
+import net.minecraft.util.JavaBackportUtil;
 import net.minecraft.util.JsonUtils;
 import org.apache.commons.lang3.Validate;
 
@@ -24,7 +26,7 @@ public class AnimationMetadataSectionSerializer extends BaseMetadataSectionSeria
 
         if (i != 1)
         {
-            Validate.inclusiveBetween(1L, 2147483647L, (long)i, "Invalid default frame time");
+            JavaBackportUtil.validateInclusiveBetween(1L, 2147483647L, (long)i, "Invalid default frame time");
         }
 
         if (jsonobject.has("frames"))
@@ -55,12 +57,12 @@ public class AnimationMetadataSectionSerializer extends BaseMetadataSectionSeria
 
         if (k != -1)
         {
-            Validate.inclusiveBetween(1L, 2147483647L, (long)k, "Invalid width");
+            JavaBackportUtil.validateInclusiveBetween(1L, 2147483647L, (long)k, "Invalid width");
         }
 
         if (l != -1)
         {
-            Validate.inclusiveBetween(1L, 2147483647L, (long)l, "Invalid height");
+            JavaBackportUtil.validateInclusiveBetween(1L, 2147483647L, (long)l, "Invalid height");
         }
 
         boolean flag = JsonUtils.getBoolean(jsonobject, "interpolate", false);
@@ -80,11 +82,11 @@ public class AnimationMetadataSectionSerializer extends BaseMetadataSectionSeria
 
             if (jsonobject.has("time"))
             {
-                Validate.inclusiveBetween(1L, 2147483647L, (long)i, "Invalid frame time");
+                JavaBackportUtil.validateInclusiveBetween(1L, 2147483647L, (long)i, "Invalid frame time");
             }
 
             int j = JsonUtils.getInt(jsonobject, "index");
-            Validate.inclusiveBetween(0L, 2147483647L, (long)j, "Invalid frame index");
+            JavaBackportUtil.validateInclusiveBetween(0L, 2147483647L, (long)j, "Invalid frame index");
             return new AnimationFrame(j, i);
         }
         else
diff --git a/src/minecraft/net/minecraft/client/resources/data/LanguageMetadataSectionSerializer.java b/src/minecraft/net/minecraft/client/resources/data/LanguageMetadataSectionSerializer.java
index 9de1b36..13ee907 100644
--- a/src/minecraft/net/minecraft/client/resources/data/LanguageMetadataSectionSerializer.java
+++ b/src/minecraft/net/minecraft/client/resources/data/LanguageMetadataSectionSerializer.java
@@ -26,12 +26,12 @@ public class LanguageMetadataSectionSerializer extends BaseMetadataSectionSerial
             String s2 = JsonUtils.getString(jsonobject1, "name");
             boolean flag = JsonUtils.getBoolean(jsonobject1, "bidirectional", false);
 
-            if (s1.isEmpty())
+            if (s1.length() == 0)
             {
                 throw new JsonParseException("Invalid language->\'" + s + "\'->region: empty value");
             }
 
-            if (s2.isEmpty())
+            if (s2.length() == 0)
             {
                 throw new JsonParseException("Invalid language->\'" + s + "\'->name: empty value");
             }
diff --git a/src/minecraft/net/minecraft/client/resources/model/ModelBakery.java b/src/minecraft/net/minecraft/client/resources/model/ModelBakery.java
index 62edd0d..4c6020d 100644
--- a/src/minecraft/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/minecraft/net/minecraft/client/resources/model/ModelBakery.java
@@ -15,11 +15,14 @@ import java.io.StringReader;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.Deque;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+
+import io.netty.util.internal.PlatformDependent;
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
 import net.minecraft.client.renderer.BlockModelShapes;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.block.model.BlockPart;
@@ -382,7 +385,7 @@ public class ModelBakery
 
         for (Entry<RegistryDelegate<Item>, Set<String>> entry : customVariantNames.entrySet())
         {
-            this.variantNames.put(((RegistryDelegate)entry.getKey()).get(), Lists.newArrayList(((Set)entry.getValue()).iterator()));
+            this.variantNames.put(entry.getKey().get(), Lists.newArrayList(((Set)entry.getValue()).iterator()));
         }
 
         CustomItems.update();
@@ -514,11 +517,6 @@ public class ModelBakery
         return set;
     }
 
-    public IBakedModel bakeModel(ModelBlock modelBlockIn, ModelRotation modelRotationIn, boolean uvLocked)
-    {
-        return this.bakeModel(modelBlockIn, modelRotationIn, uvLocked);
-    }
-
     protected IBakedModel bakeModel(ModelBlock p_bakeModel_1_, ITransformation p_bakeModel_2_, boolean p_bakeModel_3_)
     {
         TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.sprites.get(new ResourceLocation(p_bakeModel_1_.resolveTextureName("particle")));
@@ -575,7 +573,7 @@ public class ModelBakery
 
     private void loadModels()
     {
-        Deque<ResourceLocation> deque = Queues.<ResourceLocation>newArrayDeque();
+        Deque<ResourceLocation> deque = new ArrayDequeV6<ResourceLocation>();
         Set<ResourceLocation> set = Sets.<ResourceLocation>newHashSet();
 
         for (ResourceLocation resourcelocation : this.models.keySet())
diff --git a/src/minecraft/net/minecraft/client/shader/ShaderGroup.java b/src/minecraft/net/minecraft/client/shader/ShaderGroup.java
index 8cd7d6b..adf315b 100644
--- a/src/minecraft/net/minecraft/client/shader/ShaderGroup.java
+++ b/src/minecraft/net/minecraft/client/shader/ShaderGroup.java
@@ -60,7 +60,7 @@ public class ShaderGroup
         {
             IResource iresource = this.resourceManager.getResource(p_152765_2_);
             inputstream = iresource.getInputStream();
-            JsonObject jsonobject = jsonparser.parse(IOUtils.toString(inputstream, Charsets.UTF_8)).getAsJsonObject();
+            JsonObject jsonobject = jsonparser.parse(IOUtils.toString(inputstream, Charsets.UTF_8.name())).getAsJsonObject();
 
             if (JsonUtils.isJsonArray(jsonobject, "targets"))
             {
diff --git a/src/minecraft/net/minecraft/client/shader/ShaderManager.java b/src/minecraft/net/minecraft/client/shader/ShaderManager.java
index 1f99964..900a0f8 100644
--- a/src/minecraft/net/minecraft/client/shader/ShaderManager.java
+++ b/src/minecraft/net/minecraft/client/shader/ShaderManager.java
@@ -56,7 +56,7 @@ public class ShaderManager
         try
         {
             inputstream = resourceManager.getResource(resourcelocation).getInputStream();
-            JsonObject jsonobject = jsonparser.parse(IOUtils.toString(inputstream, Charsets.UTF_8)).getAsJsonObject();
+            JsonObject jsonobject = jsonparser.parse(IOUtils.toString(inputstream, Charsets.UTF_8.name())).getAsJsonObject();
             String s = JsonUtils.getString(jsonobject, "vertex");
             String s1 = JsonUtils.getString(jsonobject, "fragment");
             JsonArray jsonarray = JsonUtils.getJsonArray(jsonobject, "samplers", (JsonArray)null);
diff --git a/src/minecraft/net/minecraft/client/stream/BroadcastController.java b/src/minecraft/net/minecraft/client/stream/BroadcastController.java
index a2d7851..3f30ed6 100644
--- a/src/minecraft/net/minecraft/client/stream/BroadcastController.java
+++ b/src/minecraft/net/minecraft/client/stream/BroadcastController.java
@@ -561,9 +561,9 @@ public class BroadcastController
         {
             this.func_152845_C();
 
-            if (p_152818_1_ != null && !p_152818_1_.isEmpty())
+            if (p_152818_1_ != null && p_152818_1_.length() != 0)
             {
-                if (p_152818_2_ != null && p_152818_2_.data != null && !p_152818_2_.data.isEmpty())
+                if (p_152818_2_ != null && p_152818_2_.data != null && p_152818_2_.data.length() != 0)
                 {
                     this.field_152880_p = p_152818_1_;
                     this.authenticationToken = p_152818_2_;
diff --git a/src/minecraft/net/minecraft/client/util/JsonException.java b/src/minecraft/net/minecraft/client/util/JsonException.java
index 272152d..62122ae 100644
--- a/src/minecraft/net/minecraft/client/util/JsonException.java
+++ b/src/minecraft/net/minecraft/client/util/JsonException.java
@@ -19,7 +19,7 @@ public class JsonException extends IOException
 
     public JsonException(String p_i45280_1_, Throwable p_i45280_2_)
     {
-        super(p_i45280_2_);
+        super(p_i45280_1_);
         this.field_151383_a.add(new JsonException.Entry());
         this.field_151382_b = p_i45280_1_;
     }
diff --git a/src/minecraft/net/minecraft/entity/ai/attributes/AttributeModifier.java b/src/minecraft/net/minecraft/entity/ai/attributes/AttributeModifier.java
index 6a604ce..f9cf345 100644
--- a/src/minecraft/net/minecraft/entity/ai/attributes/AttributeModifier.java
+++ b/src/minecraft/net/minecraft/entity/ai/attributes/AttributeModifier.java
@@ -2,6 +2,8 @@ package net.minecraft.entity.ai.attributes;
 
 import io.netty.util.internal.ThreadLocalRandom;
 import java.util.UUID;
+
+import net.minecraft.util.JavaBackportUtil;
 import net.minecraft.util.MathHelper;
 import org.apache.commons.lang3.Validate;
 
@@ -30,7 +32,7 @@ public class AttributeModifier
         this.amount = amountIn;
         this.operation = operationIn;
         Validate.notEmpty(nameIn, "Modifier name cannot be empty", new Object[0]);
-        Validate.inclusiveBetween(0L, 2L, (long)operationIn, "Invalid operation");
+        JavaBackportUtil.validateInclusiveBetween(0L, 2L, (long)operationIn, "Invalid operation");
     }
 
     public UUID getID()
diff --git a/src/minecraft/net/minecraft/entity/player/EntityPlayer.java b/src/minecraft/net/minecraft/entity/player/EntityPlayer.java
index 7daa691..43571c6 100644
--- a/src/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ b/src/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -59,16 +59,7 @@ import net.minecraft.stats.AchievementList;
 import net.minecraft.stats.StatBase;
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntitySign;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.FoodStats;
-import net.minecraft.util.IChatComponent;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.IInteractionObject;
 import net.minecraft.world.LockCode;
@@ -2372,7 +2363,7 @@ public abstract class EntityPlayer extends EntityLivingBase
 
     public static UUID getOfflineUUID(String username)
     {
-        return UUID.nameUUIDFromBytes(("OfflinePlayer:" + username).getBytes(Charsets.UTF_8));
+        return UUID.nameUUIDFromBytes(JavaBackportUtil.getStringBytes("OfflinePlayer:" + username, Charsets.UTF_8));
     }
 
     /**
diff --git a/src/minecraft/net/minecraft/nbt/JsonToNBT.java b/src/minecraft/net/minecraft/nbt/JsonToNBT.java
index 5554aca..989a1cb 100644
--- a/src/minecraft/net/minecraft/nbt/JsonToNBT.java
+++ b/src/minecraft/net/minecraft/nbt/JsonToNBT.java
@@ -91,7 +91,7 @@ public class JsonToNBT
         }
         else
         {
-            if (i == 0 && !p_150310_0_.isEmpty())
+            if (i == 0 && p_150310_0_.length() != 0)
             {
                 i = 1;
             }
diff --git a/src/minecraft/net/minecraft/nbt/NBTTagString.java b/src/minecraft/net/minecraft/nbt/NBTTagString.java
index 2dc5e2d..c783014 100644
--- a/src/minecraft/net/minecraft/nbt/NBTTagString.java
+++ b/src/minecraft/net/minecraft/nbt/NBTTagString.java
@@ -65,7 +65,7 @@ public class NBTTagString extends NBTBase
      */
     public boolean hasNoTags()
     {
-        return this.data.isEmpty();
+        return this.data.length() == 0;
     }
 
     public boolean equals(Object p_equals_1_)
diff --git a/src/minecraft/net/minecraft/network/NetworkManager.java b/src/minecraft/net/minecraft/network/NetworkManager.java
index 9349d37..d7fe32a 100644
--- a/src/minecraft/net/minecraft/network/NetworkManager.java
+++ b/src/minecraft/net/minecraft/network/NetworkManager.java
@@ -13,9 +13,9 @@ import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.SimpleChannelInboundHandler;
-import io.netty.channel.epoll.Epoll;
+/*import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
-import io.netty.channel.epoll.EpollSocketChannel;
+import io.netty.channel.epoll.EpollSocketChannel;*/
 import io.netty.channel.local.LocalChannel;
 import io.netty.channel.local.LocalEventLoopGroup;
 import io.netty.channel.local.LocalServerChannel;
@@ -54,7 +54,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
     private static final Logger logger = LogManager.getLogger();
     public static final Marker logMarkerNetwork = MarkerManager.getMarker("NETWORK");
     public static final Marker logMarkerPackets = MarkerManager.getMarker("NETWORK_PACKETS", logMarkerNetwork);
-    public static final AttributeKey<EnumConnectionState> attrKeyConnectionState = AttributeKey.<EnumConnectionState>valueOf("protocol");
+    public static final AttributeKey<EnumConnectionState> attrKeyConnectionState = new AttributeKey<EnumConnectionState>("protocol"); //TODO was AttributeKey.<EnumConnectionState>valueOf("protocol"); but requires update
     public static final LazyLoadBase<NioEventLoopGroup> CLIENT_NIO_EVENTLOOP = new LazyLoadBase<NioEventLoopGroup>()
     {
         protected NioEventLoopGroup load()
@@ -62,13 +62,13 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
             return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).build());
         }
     };
-    public static final LazyLoadBase<EpollEventLoopGroup> field_181125_e = new LazyLoadBase<EpollEventLoopGroup>()
+    /*public static final LazyLoadBase<EpollEventLoopGroup> field_181125_e = new LazyLoadBase<EpollEventLoopGroup>()
     {
         protected EpollEventLoopGroup load()
         {
             return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
         }
-    };
+    };*/
     public static final LazyLoadBase<LocalEventLoopGroup> CLIENT_LOCAL_EVENTLOOP = new LazyLoadBase<LocalEventLoopGroup>()
     {
         protected LocalEventLoopGroup load()
@@ -345,12 +345,12 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
         Class <? extends SocketChannel > oclass;
         LazyLoadBase <? extends EventLoopGroup > lazyloadbase;
 
-        if (Epoll.isAvailable() && p_181124_2_)
-        {
-            oclass = EpollSocketChannel.class;
-            lazyloadbase = field_181125_e;
-        }
-        else
+//        if (Epoll.isAvailable() && p_181124_2_)
+//        {
+//            oclass = EpollSocketChannel.class;
+//            lazyloadbase = field_181125_e;
+//        }
+//        else
         {
             oclass = NioSocketChannel.class;
             lazyloadbase = CLIENT_NIO_EVENTLOOP;
diff --git a/src/minecraft/net/minecraft/network/NetworkSystem.java b/src/minecraft/net/minecraft/network/NetworkSystem.java
index bf12f45..cdc1cde 100644
--- a/src/minecraft/net/minecraft/network/NetworkSystem.java
+++ b/src/minecraft/net/minecraft/network/NetworkSystem.java
@@ -10,9 +10,9 @@ import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
-import io.netty.channel.epoll.Epoll;
+/*import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
-import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.epoll.EpollServerSocketChannel;*/
 import io.netty.channel.local.LocalAddress;
 import io.netty.channel.local.LocalEventLoopGroup;
 import io.netty.channel.local.LocalServerChannel;
@@ -55,13 +55,13 @@ public class NetworkSystem
             return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
         }
     };
-    public static final LazyLoadBase<EpollEventLoopGroup> field_181141_b = new LazyLoadBase<EpollEventLoopGroup>()
+    /*public static final LazyLoadBase<EpollEventLoopGroup> field_181141_b = new LazyLoadBase<EpollEventLoopGroup>()
     {
         protected EpollEventLoopGroup load()
         {
             return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
         }
-    };
+    };*/
     public static final LazyLoadBase<LocalEventLoopGroup> SERVER_LOCAL_EVENTLOOP = new LazyLoadBase<LocalEventLoopGroup>()
     {
         protected LocalEventLoopGroup load()
@@ -94,13 +94,13 @@ public class NetworkSystem
             Class <? extends ServerSocketChannel > oclass;
             LazyLoadBase <? extends EventLoopGroup > lazyloadbase;
 
-            if (Epoll.isAvailable() && this.mcServer.func_181035_ah())
+            /*if (Epoll.isAvailable() && this.mcServer.func_181035_ah())
             {
                 oclass = EpollServerSocketChannel.class;
                 lazyloadbase = field_181141_b;
                 logger.info("Using epoll channel type");
             }
-            else
+            else*/
             {
                 oclass = NioServerSocketChannel.class;
                 lazyloadbase = eventLoops;
diff --git a/src/minecraft/net/minecraft/network/PacketBuffer.java b/src/minecraft/net/minecraft/network/PacketBuffer.java
index e30af25..600bd41 100644
--- a/src/minecraft/net/minecraft/network/PacketBuffer.java
+++ b/src/minecraft/net/minecraft/network/PacketBuffer.java
@@ -24,6 +24,7 @@ import net.minecraft.nbt.NBTSizeTracker;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.IChatComponent;
+import net.minecraft.util.JavaBackportUtil;
 
 public class PacketBuffer extends ByteBuf
 {
@@ -288,7 +289,7 @@ public class PacketBuffer extends ByteBuf
         }
         else
         {
-            String s = new String(this.readBytes(i).array(), Charsets.UTF_8);
+            String s = JavaBackportUtil.newStringFromBytes(this.readBytes(i).array(), Charsets.UTF_8);
 
             if (s.length() > maxLength)
             {
@@ -303,7 +304,7 @@ public class PacketBuffer extends ByteBuf
 
     public PacketBuffer writeString(String string)
     {
-        byte[] abyte = string.getBytes(Charsets.UTF_8);
+        byte[] abyte = JavaBackportUtil.getStringBytes(string, Charsets.UTF_8);
 
         if (abyte.length > 32767)
         {
diff --git a/src/minecraft/net/minecraft/network/PingResponseHandler.java b/src/minecraft/net/minecraft/network/PingResponseHandler.java
index 41e5efb..9dccb9e 100644
--- a/src/minecraft/net/minecraft/network/PingResponseHandler.java
+++ b/src/minecraft/net/minecraft/network/PingResponseHandler.java
@@ -8,6 +8,7 @@ import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import java.net.InetSocketAddress;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.JavaBackportUtil;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -57,7 +58,7 @@ public class PingResponseHandler extends ChannelInboundHandlerAdapter
                     default:
                         boolean flag1 = bytebuf.readUnsignedByte() == 1;
                         flag1 = flag1 & bytebuf.readUnsignedByte() == 250;
-                        flag1 = flag1 & "MC|PingHost".equals(new String(bytebuf.readBytes(bytebuf.readShort() * 2).array(), Charsets.UTF_16BE));
+                        flag1 = flag1 & "MC|PingHost".equals(JavaBackportUtil.newStringFromBytes(bytebuf.readBytes(bytebuf.readShort() * 2).array(), Charsets.UTF_16BE));
                         int j = bytebuf.readUnsignedShort();
                         flag1 = flag1 & bytebuf.readUnsignedByte() >= 73;
                         flag1 = flag1 & 3 + bytebuf.readBytes(bytebuf.readShort() * 2).array().length + 4 == j;
diff --git a/src/minecraft/net/minecraft/realms/RealmsServerStatusPinger.java b/src/minecraft/net/minecraft/realms/RealmsServerStatusPinger.java
index f5fa8a0..e1a87a5 100644
--- a/src/minecraft/net/minecraft/realms/RealmsServerStatusPinger.java
+++ b/src/minecraft/net/minecraft/realms/RealmsServerStatusPinger.java
@@ -29,7 +29,7 @@ public class RealmsServerStatusPinger
 
     public void pingServer(final String p_pingServer_1_, final RealmsServerPing p_pingServer_2_) throws UnknownHostException
     {
-        if (p_pingServer_1_ != null && !p_pingServer_1_.startsWith("0.0.0.0") && !p_pingServer_1_.isEmpty())
+        if (p_pingServer_1_ != null && !p_pingServer_1_.startsWith("0.0.0.0") && p_pingServer_1_.length() != 0)
         {
             RealmsServerAddress realmsserveraddress = RealmsServerAddress.parseString(p_pingServer_1_);
             final NetworkManager networkmanager = NetworkManager.func_181124_a(InetAddress.getByName(realmsserveraddress.getHost()), realmsserveraddress.getPort(), false);
diff --git a/src/minecraft/net/minecraft/server/MinecraftServer.java b/src/minecraft/net/minecraft/server/MinecraftServer.java
index 8474102..cdfd1f6 100644
--- a/src/minecraft/net/minecraft/server/MinecraftServer.java
+++ b/src/minecraft/net/minecraft/server/MinecraftServer.java
@@ -33,6 +33,8 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.imageio.ImageIO;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.command.CommandBase;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandManager;
@@ -179,7 +181,7 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
     private long nanoTimeSinceStatusRefresh = 0L;
     private final GameProfileRepository profileRepo;
     private final PlayerProfileCache profileCache;
-    protected final Queue < FutureTask<? >> futureTaskQueue = Queues. < FutureTask<? >> newArrayDeque();
+    protected final Queue < FutureTask<? >> futureTaskQueue = PlatformDependent.newArrayDeque();
     private Thread serverThread;
     private long currentTime = getCurrentTimeMillis();
 
diff --git a/src/minecraft/net/minecraft/server/management/PlayerProfileCache.java b/src/minecraft/net/minecraft/server/management/PlayerProfileCache.java
index 5e0e7fd..1e1073e 100644
--- a/src/minecraft/net/minecraft/server/management/PlayerProfileCache.java
+++ b/src/minecraft/net/minecraft/server/management/PlayerProfileCache.java
@@ -130,17 +130,17 @@ public class PlayerProfileCache
             expirationDate = calendar.getTime();
         }
 
-        String s = gameProfile.getName().toLowerCase(Locale.ROOT);
+        String s = gameProfile.getName().toLowerCase(Locale.ENGLISH);
         PlayerProfileCache.ProfileEntry playerprofilecache$profileentry = new PlayerProfileCache.ProfileEntry(gameProfile, expirationDate);
 
         if (this.uuidToProfileEntryMap.containsKey(uuid))
         {
             PlayerProfileCache.ProfileEntry playerprofilecache$profileentry1 = (PlayerProfileCache.ProfileEntry)this.uuidToProfileEntryMap.get(uuid);
-            this.usernameToProfileEntryMap.remove(playerprofilecache$profileentry1.getGameProfile().getName().toLowerCase(Locale.ROOT));
+            this.usernameToProfileEntryMap.remove(playerprofilecache$profileentry1.getGameProfile().getName().toLowerCase(Locale.ENGLISH));
             this.gameProfiles.remove(gameProfile);
         }
 
-        this.usernameToProfileEntryMap.put(gameProfile.getName().toLowerCase(Locale.ROOT), playerprofilecache$profileentry);
+        this.usernameToProfileEntryMap.put(gameProfile.getName().toLowerCase(Locale.ENGLISH), playerprofilecache$profileentry);
         this.uuidToProfileEntryMap.put(uuid, playerprofilecache$profileentry);
         this.gameProfiles.addFirst(gameProfile);
         this.save();
@@ -152,13 +152,13 @@ public class PlayerProfileCache
      */
     public GameProfile getGameProfileForUsername(String username)
     {
-        String s = username.toLowerCase(Locale.ROOT);
+        String s = username.toLowerCase(Locale.ENGLISH);
         PlayerProfileCache.ProfileEntry playerprofilecache$profileentry = (PlayerProfileCache.ProfileEntry)this.usernameToProfileEntryMap.get(s);
 
         if (playerprofilecache$profileentry != null && (new Date()).getTime() >= playerprofilecache$profileentry.expirationDate.getTime())
         {
             this.uuidToProfileEntryMap.remove(playerprofilecache$profileentry.getGameProfile().getId());
-            this.usernameToProfileEntryMap.remove(playerprofilecache$profileentry.getGameProfile().getName().toLowerCase(Locale.ROOT));
+            this.usernameToProfileEntryMap.remove(playerprofilecache$profileentry.getGameProfile().getName().toLowerCase(Locale.ENGLISH));
             this.gameProfiles.remove(playerprofilecache$profileentry.getGameProfile());
             playerprofilecache$profileentry = null;
         }
diff --git a/src/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java b/src/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java
index a229b08..05a1227 100644
--- a/src/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java
+++ b/src/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java
@@ -23,10 +23,7 @@ import net.minecraft.network.login.server.S01PacketEncryptionRequest;
 import net.minecraft.network.login.server.S02PacketLoginSuccess;
 import net.minecraft.network.login.server.S03PacketEnableCompression;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.CryptManager;
-import net.minecraft.util.IChatComponent;
-import net.minecraft.util.ITickable;
+import net.minecraft.util.*;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -232,7 +229,7 @@ public class NetHandlerLoginServer implements INetHandlerLoginServer, ITickable
 
     protected GameProfile getOfflineProfile(GameProfile original)
     {
-        UUID uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + original.getName()).getBytes(Charsets.UTF_8));
+        UUID uuid = UUID.nameUUIDFromBytes(JavaBackportUtil.getStringBytes("OfflinePlayer:" + original.getName(), Charsets.UTF_8));
         return new GameProfile(uuid, original.getName());
     }
 
diff --git a/src/minecraft/net/minecraft/src/Config.java b/src/minecraft/net/minecraft/src/Config.java
index 3a5cedd..9c0e522 100644
--- a/src/minecraft/net/minecraft/src/Config.java
+++ b/src/minecraft/net/minecraft/src/Config.java
@@ -1,6 +1,6 @@
 package net.minecraft.src;
 
-import java.awt.Desktop;
+//import java.awt.Desktop;
 import java.awt.Dimension;
 import java.awt.image.BufferedImage;
 import java.io.BufferedReader;
@@ -289,7 +289,8 @@ public class Config
 
     private static GlVersion getGlVersionLwjgl()
     {
-        return GLContext.getCapabilities().OpenGL44 ? new GlVersion(4, 4) : (GLContext.getCapabilities().OpenGL43 ? new GlVersion(4, 3) : (GLContext.getCapabilities().OpenGL42 ? new GlVersion(4, 2) : (GLContext.getCapabilities().OpenGL41 ? new GlVersion(4, 1) : (GLContext.getCapabilities().OpenGL40 ? new GlVersion(4, 0) : (GLContext.getCapabilities().OpenGL33 ? new GlVersion(3, 3) : (GLContext.getCapabilities().OpenGL32 ? new GlVersion(3, 2) : (GLContext.getCapabilities().OpenGL31 ? new GlVersion(3, 1) : (GLContext.getCapabilities().OpenGL30 ? new GlVersion(3, 0) : (GLContext.getCapabilities().OpenGL21 ? new GlVersion(2, 1) : (GLContext.getCapabilities().OpenGL20 ? new GlVersion(2, 0) : (GLContext.getCapabilities().OpenGL15 ? new GlVersion(1, 5) : (GLContext.getCapabilities().OpenGL14 ? new GlVersion(1, 4) : (GLContext.getCapabilities().OpenGL13 ? new GlVersion(1, 3) : (GLContext.getCapabilities().OpenGL12 ? new GlVersion(1, 2) : (GLContext.getCapabilities().OpenGL11 ? new GlVersion(1, 1) : new GlVersion(1, 0))))))))))))))));
+        //return GLContext.getCapabilities().OpenGL44 ? new GlVersion(4, 4) : (GLContext.getCapabilities().OpenGL43 ? new GlVersion(4, 3) : (GLContext.getCapabilities().OpenGL42 ? new GlVersion(4, 2) : (GLContext.getCapabilities().OpenGL41 ? new GlVersion(4, 1) : (GLContext.getCapabilities().OpenGL40 ? new GlVersion(4, 0) : (GLContext.getCapabilities().OpenGL33 ? new GlVersion(3, 3) : (GLContext.getCapabilities().OpenGL32 ? new GlVersion(3, 2) : (GLContext.getCapabilities().OpenGL31 ? new GlVersion(3, 1) : (GLContext.getCapabilities().OpenGL30 ? new GlVersion(3, 0) : (GLContext.getCapabilities().OpenGL21 ? new GlVersion(2, 1) : (GLContext.getCapabilities().OpenGL20 ? new GlVersion(2, 0) : (GLContext.getCapabilities().OpenGL15 ? new GlVersion(1, 5) : (GLContext.getCapabilities().OpenGL14 ? new GlVersion(1, 4) : (GLContext.getCapabilities().OpenGL13 ? new GlVersion(1, 3) : (GLContext.getCapabilities().OpenGL12 ? new GlVersion(1, 2) : (GLContext.getCapabilities().OpenGL11 ? new GlVersion(1, 1) : new GlVersion(1, 0))))))))))))))));
+        return GLContext.getCapabilities().OpenGL41 ? new GlVersion(4, 1) : (GLContext.getCapabilities().OpenGL40 ? new GlVersion(4, 0) : (GLContext.getCapabilities().OpenGL33 ? new GlVersion(3, 3) : (GLContext.getCapabilities().OpenGL32 ? new GlVersion(3, 2) : (GLContext.getCapabilities().OpenGL31 ? new GlVersion(3, 1) : (GLContext.getCapabilities().OpenGL30 ? new GlVersion(3, 0) : (GLContext.getCapabilities().OpenGL21 ? new GlVersion(2, 1) : (GLContext.getCapabilities().OpenGL20 ? new GlVersion(2, 0) : (GLContext.getCapabilities().OpenGL15 ? new GlVersion(1, 5) : (GLContext.getCapabilities().OpenGL14 ? new GlVersion(1, 4) : (GLContext.getCapabilities().OpenGL13 ? new GlVersion(1, 3) : (GLContext.getCapabilities().OpenGL12 ? new GlVersion(1, 2) : (GLContext.getCapabilities().OpenGL11 ? new GlVersion(1, 1) : new GlVersion(1, 0)))))))))))));
     }
 
     public static GlVersion getGlVersion()
@@ -981,7 +982,7 @@ public class Config
     public static IResourcePack[] getResourcePacks()
     {
         ResourcePackRepository resourcepackrepository = minecraft.getResourcePackRepository();
-        List list = resourcepackrepository.getRepositoryEntries();
+        List<ResourcePackRepository.Entry> list = resourcepackrepository.getRepositoryEntries();
         List list1 = new ArrayList();
 
         for (ResourcePackRepository.Entry resourcepackrepository$entry : list)
@@ -1704,12 +1705,12 @@ public class Config
 
                 if (!s2.equals(s3))
                 {
-                    if (s2.isEmpty())
+                    if (s2.length() == 0)
                     {
                         return 1;
                     }
 
-                    if (s3.isEmpty())
+                    if (s3.length() == 0)
                     {
                         return -1;
                     }
@@ -2407,7 +2408,7 @@ public class Config
         return gameSettings.ofSmoothFps;
     }
 
-    public static boolean openWebLink(URI p_openWebLink_0_)
+    /*public static boolean openWebLink(URI p_openWebLink_0_) I'm just not going to bother
     {
         try
         {
@@ -2420,7 +2421,7 @@ public class Config
             warn(exception.getClass().getName() + ": " + exception.getMessage());
             return false;
         }
-    }
+    }*/
 
     public static boolean isShowGlErrors()
     {
diff --git a/src/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java b/src/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
index 940cb69..ad31a21 100644
--- a/src/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
+++ b/src/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -11,11 +11,13 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+
+import io.netty.util.internal.PlatformDependent;
 import net.optifine.util.IteratorCache;
 
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
-    private static final Set < Class<? >> field_181158_a = Collections. < Class<? >> newSetFromMap(new ConcurrentHashMap());
+    private static final Set < Class<? >> field_181158_a = PlatformDependent.newSetFromMap(new ConcurrentHashMap<Class<?>, Boolean>());
     private final Map < Class<?>, List<T >> map = Maps. < Class<?>, List<T >> newHashMap();
     private final Set < Class<? >> knownKeys = Sets. < Class<? >> newIdentityHashSet();
     private final Class<T> baseClass;
diff --git a/src/minecraft/net/minecraft/util/JavaBackportUtil.java b/src/minecraft/net/minecraft/util/JavaBackportUtil.java
new file mode 100644
index 0000000..c7cc162
--- /dev/null
+++ b/src/minecraft/net/minecraft/util/JavaBackportUtil.java
@@ -0,0 +1,139 @@
+package net.minecraft.util;
+
+import sun.misc.FloatConsts;
+
+import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Array;
+import java.nio.charset.Charset;
+
+public final class JavaBackportUtil {
+
+    /* Arrays */
+
+    public static int[] arrayCopyOf(int[] original, int newLength) {
+        int[] copy = new int[newLength];
+        System.arraycopy(original, 0, copy, 0,
+                Math.min(original.length, newLength));
+        return copy;
+    }
+
+    public static <T> T[] arrayCopyOfRange(T[] original, int from, int to) {
+        return arrayCopyOfRange(original, from, to, (Class<? extends T[]>) original.getClass());
+    }
+
+    public static <T,U> T[] arrayCopyOfRange(U[] original, int from, int to, Class<? extends T[]> newType) {
+        int newLength = to - from;
+        if (newLength < 0)
+            throw new IllegalArgumentException(from + " > " + to);
+        @SuppressWarnings("unchecked")
+        T[] copy = ((Object)newType == (Object)Object[].class)
+                ? (T[]) new Object[newLength]
+                : (T[]) Array.newInstance(newType.getComponentType(), newLength);
+        System.arraycopy(original, from, copy, 0,
+                Math.min(original.length - from, newLength));
+        return copy;
+    }
+
+    /* Strings */
+
+    public static byte[] getStringBytes(String string, Charset charset) {
+        try {
+            return string.getBytes(charset.name());
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException(charset.name() + " is not on this platform!");
+        }
+    }
+    
+    public static String newStringFromBytes(byte[] bytes, Charset charset) {
+        try {
+            return new String(bytes, charset.name());
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException(charset.name() + " is not on this platform!");
+        }
+    }
+
+    public static boolean isAllASCII(String input) {
+        boolean isASCII = true;
+        for (int i = 0; i < input.length(); i++) {
+            int c = input.charAt(i);
+            if (c > 0x7F) {
+                isASCII = false;
+                break;
+            }
+        }
+        return isASCII;
+    }
+
+    /* Math */
+
+    public static float nextAfter(float start, double direction) {
+        /*
+         * The cases:
+         *
+         * nextAfter(+infinity, 0)  == MAX_VALUE
+         * nextAfter(+infinity, +infinity)  == +infinity
+         * nextAfter(-infinity, 0)  == -MAX_VALUE
+         * nextAfter(-infinity, -infinity)  == -infinity
+         *
+         * are naturally handled without any additional testing
+         */
+
+        // First check for NaN values
+        if (Float.isNaN(start) || Double.isNaN(direction)) {
+            // return a NaN derived from the input NaN(s)
+            return start + (float)direction;
+        } else if (start == direction) {
+            return (float)direction;
+        } else {        // start > direction or start < direction
+            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 => +0.0)
+            // then bitwise convert start to integer.
+            int transducer = Float.floatToRawIntBits(start + 0.0f);
+
+            /*
+             * IEEE 754 floating-point numbers are lexicographically
+             * ordered if treated as signed- magnitude integers .
+             * Since Java's integers are two's complement,
+             * incrementing" the two's complement representation of a
+             * logically negative floating-point value *decrements*
+             * the signed-magnitude representation. Therefore, when
+             * the integer representation of a floating-point values
+             * is less than zero, the adjustment to the representation
+             * is in the opposite direction than would be expected at
+             * first.
+             */
+            if (direction > start) {// Calculate next greater value
+                transducer = transducer + (transducer >= 0 ? 1:-1);
+            } else  { // Calculate next lesser value
+                assert direction < start;
+                if (transducer > 0)
+                    --transducer;
+                else
+                if (transducer < 0 )
+                    ++transducer;
+                    /*
+                     * transducer==0, the result is -MIN_VALUE
+                     *
+                     * The transition from zero (implicitly
+                     * positive) to the smallest negative
+                     * signed magnitude value must be done
+                     * explicitly.
+                     */
+                else
+                    transducer = FloatConsts.SIGN_BIT_MASK | 1;
+            }
+
+            return Float.intBitsToFloat(transducer);
+        }
+    }
+
+    /* Misc */
+
+    public static void validateInclusiveBetween(long start, long end, long value, String message) {
+        if (value < start || value > end) {
+            throw new IllegalArgumentException(String.format(message));
+        }
+    }
+
+    private JavaBackportUtil() {
+    }
+}
diff --git a/src/minecraft/net/minecraft/util/ObjectIntIdentityMap.java b/src/minecraft/net/minecraft/util/ObjectIntIdentityMap.java
index e7a4cff..20a7d01 100644
--- a/src/minecraft/net/minecraft/util/ObjectIntIdentityMap.java
+++ b/src/minecraft/net/minecraft/util/ObjectIntIdentityMap.java
@@ -9,7 +9,7 @@ import java.util.List;
 
 public class ObjectIntIdentityMap<T> implements IObjectIntIterable<T>
 {
-    private final IdentityHashMap<T, Integer> identityMap = new IdentityHashMap(512);
+    private final IdentityHashMap<T, Integer> identityMap = new IdentityHashMap(512); //todo bruh
     private final List<T> objectList = Lists.<T>newArrayList();
 
     public void put(T key, int value)
diff --git a/src/minecraft/net/minecraft/util/StringTranslate.java b/src/minecraft/net/minecraft/util/StringTranslate.java
index 058a950..de34e3c 100644
--- a/src/minecraft/net/minecraft/util/StringTranslate.java
+++ b/src/minecraft/net/minecraft/util/StringTranslate.java
@@ -8,7 +8,7 @@ import java.io.InputStream;
 import java.util.IllegalFormatException;
 import java.util.Map;
 import java.util.regex.Pattern;
-import org.apache.commons.io.Charsets;
+import com.google.common.base.Charsets;
 import org.apache.commons.io.IOUtils;
 
 public class StringTranslate
@@ -38,9 +38,9 @@ public class StringTranslate
         {
             InputStream inputstream = StringTranslate.class.getResourceAsStream("/assets/minecraft/lang/en_US.lang");
 
-            for (String s : IOUtils.readLines(inputstream, Charsets.UTF_8))
+            for (String s : IOUtils.readLines(inputstream, Charsets.UTF_8.name()))
             {
-                if (!s.isEmpty() && s.charAt(0) != 35)
+                if (s.length() != 0 && s.charAt(0) != 35)
                 {
                     String[] astring = (String[])Iterables.toArray(equalSignSplitter.split(s), String.class);
 
diff --git a/src/minecraft/net/minecraft/world/LockCode.java b/src/minecraft/net/minecraft/world/LockCode.java
index 033bd5d..653c2c9 100644
--- a/src/minecraft/net/minecraft/world/LockCode.java
+++ b/src/minecraft/net/minecraft/world/LockCode.java
@@ -14,7 +14,7 @@ public class LockCode
 
     public boolean isEmpty()
     {
-        return this.lock == null || this.lock.isEmpty();
+        return this.lock == null || this.lock.length() == 0;
     }
 
     public String getLock()
diff --git a/src/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java b/src/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
index b6b4e03..1c34299 100644
--- a/src/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ b/src/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -9,6 +9,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityList;
@@ -33,7 +35,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 {
     private static final Logger logger = LogManager.getLogger();
     private Map<ChunkCoordIntPair, NBTTagCompound> chunksToRemove = new ConcurrentHashMap();
-    private Set<ChunkCoordIntPair> pendingAnvilChunksCoordinates = Collections.<ChunkCoordIntPair>newSetFromMap(new ConcurrentHashMap());
+    private final Set<ChunkCoordIntPair> pendingAnvilChunksCoordinates = PlatformDependent.newSetFromMap(new ConcurrentHashMap<ChunkCoordIntPair, Boolean>());
 
     /** Save directory for chunks using the Anvil format */
     private final File chunkSaveLocation;
diff --git a/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java b/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
index b493f60..c429e4e 100644
--- a/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ b/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -6,6 +6,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.EnumCreatureType;
@@ -28,7 +30,7 @@ import org.apache.logging.log4j.Logger;
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger logger = LogManager.getLogger();
-    private Set<Long> droppedChunksSet = Collections.<Long>newSetFromMap(new ConcurrentHashMap());
+    private Set<Long> droppedChunksSet = PlatformDependent.newSetFromMap(new ConcurrentHashMap<Long, Boolean>());
 
     /** a dummy chunk, returned in place of an actual chunk. */
     private Chunk dummyChunk;
diff --git a/src/minecraft/net/minecraft/world/gen/structure/StructureMineshaftPieces.java b/src/minecraft/net/minecraft/world/gen/structure/StructureMineshaftPieces.java
index f7b4554..6163897 100644
--- a/src/minecraft/net/minecraft/world/gen/structure/StructureMineshaftPieces.java
+++ b/src/minecraft/net/minecraft/world/gen/structure/StructureMineshaftPieces.java
@@ -608,7 +608,7 @@ public class StructureMineshaftPieces
 
             int k;
 
-            for (lvt_5_1_ = 0; k < this.boundingBox.getXSize(); k = k + 4)
+            for (k = 0; k < this.boundingBox.getXSize(); k = k + 4)
             {
                 k = k + rand.nextInt(this.boundingBox.getXSize());
 
diff --git a/src/minecraft/net/optifine/BlockPosM.java b/src/minecraft/net/optifine/BlockPosM.java
index c3ceb79..eafe069 100644
--- a/src/minecraft/net/optifine/BlockPosM.java
+++ b/src/minecraft/net/optifine/BlockPosM.java
@@ -158,15 +158,15 @@ public class BlockPosM extends BlockPos
         return new BlockPos(this.mx, this.my, this.mz);
     }
 
-    public static Iterable getAllInBoxMutable(BlockPos from, BlockPos to)
+    public static Iterable<BlockPosM> ofGetAllInBoxMutable(BlockPos from, BlockPos to)
     {
         final BlockPos blockpos = new BlockPos(Math.min(from.getX(), to.getX()), Math.min(from.getY(), to.getY()), Math.min(from.getZ(), to.getZ()));
         final BlockPos blockpos1 = new BlockPos(Math.max(from.getX(), to.getX()), Math.max(from.getY(), to.getY()), Math.max(from.getZ(), to.getZ()));
-        return new Iterable()
+        return new Iterable<BlockPosM>()
         {
-            public Iterator iterator()
+            public Iterator<BlockPosM> iterator()
             {
-                return new AbstractIterator()
+                return new AbstractIterator<BlockPosM>()
                 {
                     private BlockPosM theBlockPosM = null;
                     protected BlockPosM computeNext0()
@@ -206,7 +206,7 @@ public class BlockPosM extends BlockPos
                             return this.theBlockPosM;
                         }
                     }
-                    protected Object computeNext()
+                    protected BlockPosM computeNext()
                     {
                         return this.computeNext0();
                     }
diff --git a/src/minecraft/net/optifine/ConnectedProperties.java b/src/minecraft/net/optifine/ConnectedProperties.java
index 22ac6a2..53067cc 100644
--- a/src/minecraft/net/optifine/ConnectedProperties.java
+++ b/src/minecraft/net/optifine/ConnectedProperties.java
@@ -471,7 +471,7 @@ public class ConnectedProperties
         }
     }
 
-    public static IProperty getProperty(String key, Collection properties)
+    public static IProperty getProperty(String key, Collection<IProperty> properties)
     {
         for (IProperty iproperty : properties)
         {
diff --git a/src/minecraft/net/optifine/ConnectedTextures.java b/src/minecraft/net/optifine/ConnectedTextures.java
index 45d1ea2..b545fa1 100644
--- a/src/minecraft/net/optifine/ConnectedTextures.java
+++ b/src/minecraft/net/optifine/ConnectedTextures.java
@@ -2314,7 +2314,7 @@ public class ConnectedTextures
 
             if (aconnectedproperties != null)
             {
-                list.addAll(Arrays.<E>asList(aconnectedproperties));
+                list.addAll(Arrays.asList(aconnectedproperties));
             }
         }
 
@@ -2324,7 +2324,7 @@ public class ConnectedTextures
 
             if (aconnectedproperties2 != null)
             {
-                list.addAll(Arrays.<E>asList(aconnectedproperties2));
+                list.addAll(Arrays.asList(aconnectedproperties2));
             }
         }
 
@@ -2338,12 +2338,12 @@ public class ConnectedTextures
 
             if (connectedproperties.matchTileIcons != null)
             {
-                set1.addAll(Arrays.<E>asList(connectedproperties.matchTileIcons));
+                set1.addAll(Arrays.asList(connectedproperties.matchTileIcons));
             }
 
             if (connectedproperties.tileIcons != null)
             {
-                set.addAll(Arrays.<E>asList(connectedproperties.tileIcons));
+                set.addAll(Arrays.asList(connectedproperties.tileIcons));
             }
         }
 
@@ -2351,17 +2351,17 @@ public class ConnectedTextures
         return !set1.isEmpty();
     }
 
-    private static ConnectedProperties[][] propertyListToArray(List list)
+    private static ConnectedProperties[][] propertyListToArray(List<List<ConnectedProperties>> list)
     {
         ConnectedProperties[][] aconnectedproperties = new ConnectedProperties[list.size()][];
 
         for (int i = 0; i < list.size(); ++i)
         {
-            List list = (List)list.get(i);
+            List list2 = list.get(i);
 
-            if (list != null)
+            if (list2 != null)
             {
-                ConnectedProperties[] aconnectedproperties1 = (ConnectedProperties[])((ConnectedProperties[])list.toArray(new ConnectedProperties[list.size()]));
+                ConnectedProperties[] aconnectedproperties1 = (ConnectedProperties[])((ConnectedProperties[])list2.toArray(new ConnectedProperties[list2.size()]));
                 aconnectedproperties[i] = aconnectedproperties1;
             }
         }
@@ -2425,15 +2425,15 @@ public class ConnectedTextures
             list.add(null);
         }
 
-        List list = (List)list.get(id);
+        List list2 = (List)list.get(id);
 
-        if (list == null)
+        if (list2 == null)
         {
-            list = new ArrayList();
-            list.set(id, list);
+            list2 = new ArrayList();
+            list.set(id, list2);
         }
 
-        list.add(cp);
+        list2.add(cp);
     }
 
     private static String[] getDefaultCtmPaths()
diff --git a/src/minecraft/net/optifine/CustomColors.java b/src/minecraft/net/optifine/CustomColors.java
index cdd7470..3cf7c98 100644
--- a/src/minecraft/net/optifine/CustomColors.java
+++ b/src/minecraft/net/optifine/CustomColors.java
@@ -457,8 +457,9 @@ public class CustomColors
         String s = "palette.block.";
         Map map = new HashMap();
 
-        for (String s1 : props.keySet())
+        for (Object o: props.keySet())
         {
+            String s1 = (String) o;
             String s2 = props.getProperty(s1);
 
             if (s1.startsWith(s))
@@ -612,15 +613,15 @@ public class CustomColors
             list.add(null);
         }
 
-        List list = (List)list.get(id);
+        List list2 = (List)list.get(id);
 
-        if (list == null)
+        if (list2 == null)
         {
-            list = new ArrayList();
-            list.set(id, list);
+            list2 = new ArrayList();
+            list.set(id, list2);
         }
 
-        list.add(cm);
+        list2.add(cm);
     }
 
     private static CustomColormap[][] blockListToArray(List list)
@@ -629,11 +630,11 @@ public class CustomColors
 
         for (int i = 0; i < list.size(); ++i)
         {
-            List list = (List)list.get(i);
+            List list2 = (List)list.get(i);
 
-            if (list != null)
+            if (list2 != null)
             {
-                CustomColormap[] acustomcolormap1 = (CustomColormap[])((CustomColormap[])list.toArray(new CustomColormap[list.size()]));
+                CustomColormap[] acustomcolormap1 = (CustomColormap[])((CustomColormap[])list2.toArray(new CustomColormap[list2.size()]));
                 acustomcolormap[i] = acustomcolormap1;
             }
         }
@@ -1359,8 +1360,9 @@ public class CustomColors
         Set set = props.keySet();
         int i = 0;
 
-        for (String s : set)
+        for (Object o: set)
         {
+            String s = (String) o;
             String s1 = props.getProperty(s);
 
             if (s.startsWith(prefix))
@@ -1459,8 +1461,9 @@ public class CustomColors
         float[][] afloat1 = new float[aenumdyecolor.length][];
         int k = 0;
 
-        for (String s : props.keySet())
+        for (Object o: props.keySet())
         {
+            String s = (String) o;
             String s1 = props.getProperty(s);
 
             if (s.startsWith(prefix))
@@ -1532,8 +1535,9 @@ public class CustomColors
         Arrays.fill((int[])aint, (int) - 1);
         int i = 0;
 
-        for (String s : props.keySet())
+        for (Object o: props.keySet())
         {
+            String s = (String) o;
             String s1 = props.getProperty(s);
 
             if (s.startsWith(prefix))
@@ -1588,8 +1592,9 @@ public class CustomColors
         Arrays.fill((int[])aint, (int) - 1);
         int i = 0;
 
-        for (String s : props.keySet())
+        for (Object o: props.keySet())
         {
+            String s = (String) o;
             String s1 = props.getProperty(s);
 
             if (s.startsWith(prefix))
@@ -1627,8 +1632,9 @@ public class CustomColors
         Arrays.fill((int[])aint, (int) - 1);
         int i = 0;
 
-        for (String s : props.keySet())
+        for (Object o: props.keySet())
         {
+            String s = (String) o;
             String s1 = props.getProperty(s);
 
             if (s.startsWith(prefix))
diff --git a/src/minecraft/net/optifine/CustomGuiProperties.java b/src/minecraft/net/optifine/CustomGuiProperties.java
index 46ae154..0de684f 100644
--- a/src/minecraft/net/optifine/CustomGuiProperties.java
+++ b/src/minecraft/net/optifine/CustomGuiProperties.java
@@ -196,8 +196,9 @@ public class CustomGuiProperties
 
         String s5 = property + ".";
 
-        for (String s1 : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s1 = (String) o;
             if (s1.startsWith(s5))
             {
                 String s2 = s1.substring(s5.length());
diff --git a/src/minecraft/net/optifine/CustomItemProperties.java b/src/minecraft/net/optifine/CustomItemProperties.java
index 9dfdc59..6d5977f 100644
--- a/src/minecraft/net/optifine/CustomItemProperties.java
+++ b/src/minecraft/net/optifine/CustomItemProperties.java
@@ -333,7 +333,7 @@ public class CustomItemProperties
     private static Map parseTextures(Properties props, String basePath)
     {
         String s = "texture.";
-        Map map = getMatchingProperties(props, s);
+        Map<String, String> map = getMatchingProperties(props, s);
 
         if (map.size() <= 0)
         {
@@ -341,7 +341,7 @@ public class CustomItemProperties
         }
         else
         {
-            Set set = map.keySet();
+            Set<String> set = map.keySet();
             Map map1 = new LinkedHashMap();
 
             for (String s1 : set)
@@ -422,7 +422,7 @@ public class CustomItemProperties
         }
         else
         {
-            Set set = map.keySet();
+            Set<String> set = map.keySet();
             Map map1 = new LinkedHashMap();
 
             for (String s1 : set)
@@ -633,8 +633,9 @@ public class CustomItemProperties
         {
             List list = new ArrayList();
 
-            for (String s1 : map.keySet())
+            for (Object o : map.keySet())
             {
+                String s1 = (String) o;
                 String s2 = (String)map.get(s1);
                 String s3 = s1.substring(s.length());
                 NbtTagValue nbttagvalue = new NbtTagValue(s3, s2);
@@ -646,12 +647,13 @@ public class CustomItemProperties
         }
     }
 
-    private static Map getMatchingProperties(Properties props, String keyPrefix)
+    private static Map<String, String> getMatchingProperties(Properties props, String keyPrefix)
     {
-        Map map = new LinkedHashMap();
+        Map<String, String> map = new LinkedHashMap<String, String>();
 
-        for (String s : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s = (String) o;
             String s1 = props.getProperty(s);
 
             if (s.startsWith(keyPrefix))
diff --git a/src/minecraft/net/optifine/CustomItems.java b/src/minecraft/net/optifine/CustomItems.java
index a2ad87f..24e47db 100644
--- a/src/minecraft/net/optifine/CustomItems.java
+++ b/src/minecraft/net/optifine/CustomItems.java
@@ -490,17 +490,17 @@ public class CustomItems
         return list;
     }
 
-    private static CustomItemProperties[][] propertyListToArray(List list)
+    private static CustomItemProperties[][] propertyListToArray(List<List> list)
     {
         CustomItemProperties[][] acustomitemproperties = new CustomItemProperties[list.size()][];
 
         for (int i = 0; i < list.size(); ++i)
         {
-            List list = (List)list.get(i);
+            List list2 = (List)list.get(i);
 
-            if (list != null)
+            if (list2 != null)
             {
-                CustomItemProperties[] acustomitemproperties1 = (CustomItemProperties[])((CustomItemProperties[])list.toArray(new CustomItemProperties[list.size()]));
+                CustomItemProperties[] acustomitemproperties1 = (CustomItemProperties[])((CustomItemProperties[])list2.toArray(new CustomItemProperties[list2.size()]));
                 Arrays.sort(acustomitemproperties1, new CustomItemsComparator());
                 acustomitemproperties[i] = acustomitemproperties1;
             }
@@ -546,22 +546,22 @@ public class CustomItems
         }
     }
 
-    private static void addToList(CustomItemProperties cp, List list, int id)
+    private static void addToList(CustomItemProperties cp, List<List<CustomItemProperties>> list, int id)
     {
         while (id >= list.size())
         {
             list.add(null);
         }
 
-        List list = (List)list.get(id);
+        List list2 = list.get(id);
 
-        if (list == null)
+        if (list2 == null)
         {
-            list = new ArrayList();
-            list.set(id, list);
+            list2 = new ArrayList();
+            list.set(id, list2);
         }
 
-        list.add(cp);
+        list2.add(cp);
     }
 
     public static IBakedModel getCustomItemModel(ItemStack itemStack, IBakedModel model, ResourceLocation modelLocation, boolean fullModel)
diff --git a/src/minecraft/net/optifine/CustomPanorama.java b/src/minecraft/net/optifine/CustomPanorama.java
index b596189..6d44f00 100644
--- a/src/minecraft/net/optifine/CustomPanorama.java
+++ b/src/minecraft/net/optifine/CustomPanorama.java
@@ -117,20 +117,20 @@ public class CustomPanorama
 
         for (int i = 0; i < aint.length; ++i)
         {
-            Properties properties = properties[i];
+            Properties properties2 = properties[i];
 
-            if (properties == null)
+            if (properties2 == null)
             {
-                properties = properties[0];
+                properties2 = properties[0];
             }
 
-            if (properties == null)
+            if (properties2 == null)
             {
                 aint[i] = 1;
             }
             else
             {
-                String s = properties.getProperty("weight", (String)null);
+                String s = properties2.getProperty("weight", (String)null);
                 aint[i] = Config.parseInt(s, 1);
             }
         }
diff --git a/src/minecraft/net/optifine/Lang.java b/src/minecraft/net/optifine/Lang.java
index 1c8d989..810281e 100644
--- a/src/minecraft/net/optifine/Lang.java
+++ b/src/minecraft/net/optifine/Lang.java
@@ -13,7 +13,7 @@ import net.minecraft.client.resources.I18n;
 import net.minecraft.client.resources.IResourcePack;
 import net.minecraft.src.Config;
 import net.minecraft.util.ResourceLocation;
-import org.apache.commons.io.Charsets;
+import com.google.common.base.Charsets;
 import org.apache.commons.io.IOUtils;
 
 public class Lang
@@ -74,14 +74,14 @@ public class Lang
 
     public static void loadLocaleData(InputStream is, Map localeProperties) throws IOException
     {
-        Iterator iterator = IOUtils.readLines(is, Charsets.UTF_8).iterator();
+        Iterator iterator = IOUtils.readLines(is, Charsets.UTF_8.name()).iterator();
         is.close();
 
         while (iterator.hasNext())
         {
             String s = (String)iterator.next();
 
-            if (!s.isEmpty() && s.charAt(0) != 35)
+            if (s.length() != 0 && s.charAt(0) != 35)
             {
                 String[] astring = (String[])((String[])Iterables.toArray(splitter.split(s), String.class));
 
diff --git a/src/minecraft/net/optifine/Mipmaps.java b/src/minecraft/net/optifine/Mipmaps.java
index bb11749..dc49d4c 100644
--- a/src/minecraft/net/optifine/Mipmaps.java
+++ b/src/minecraft/net/optifine/Mipmaps.java
@@ -173,9 +173,9 @@ public class Mipmaps
 
     private int averageColor(int i, int j)
     {
-        int i = (i & -16777216) >> 24 & 255;
-        int j = (j & -16777216) >> 24 & 255;
-        return (i + j >> 1 << 24) + ((i & 16711422) + (j & 16711422) >> 1);
+        int i2 = (i & -16777216) >> 24 & 255;
+        int j2 = (j & -16777216) >> 24 & 255;
+        return (i2 + j2 >> 1 << 24) + ((i & 16711422) + (j & 16711422) >> 1);
     }
 
     public static IntBuffer[] makeMipmapBuffers(Dimension[] mipmapDimensions, int[][] mipmapDatas)
diff --git a/src/minecraft/net/optifine/SmartLeaves.java b/src/minecraft/net/optifine/SmartLeaves.java
index 2009aa2..8673e5c 100644
--- a/src/minecraft/net/optifine/SmartLeaves.java
+++ b/src/minecraft/net/optifine/SmartLeaves.java
@@ -128,7 +128,7 @@ public class SmartLeaves
 
                     if (ibakedmodel != null && ibakedmodel != modelmanager.getMissingModel())
                     {
-                        List list = ibakedmodel.getGeneralQuads();
+                        List<BakedQuad> list = ibakedmodel.getGeneralQuads();
 
                         if (list.size() == 0)
                         {
diff --git a/src/minecraft/net/optifine/TextureAnimation.java b/src/minecraft/net/optifine/TextureAnimation.java
index 3be4035..087e9fa 100644
--- a/src/minecraft/net/optifine/TextureAnimation.java
+++ b/src/minecraft/net/optifine/TextureAnimation.java
@@ -208,7 +208,7 @@ public class TextureAnimation
 
         if (j + i <= this.imageData.limit())
         {
-            int k = i * frame2.index;
+            int k2 = i * frame2.index;
 
             if (k + i <= this.imageData.limit())
             {
@@ -217,7 +217,7 @@ public class TextureAnimation
                 for (int l = 0; l < i; ++l)
                 {
                     int i1 = this.imageData.get(j + l) & 255;
-                    int j1 = this.imageData.get(k + l) & 255;
+                    int j1 = this.imageData.get(k2 + l) & 255;
                     int k1 = this.mix(i1, j1, k);
                     byte b0 = (byte)k1;
                     this.interpolateData.put(b0);
diff --git a/src/minecraft/net/optifine/TextureAnimations.java b/src/minecraft/net/optifine/TextureAnimations.java
index b983e7f..3d2b745 100644
--- a/src/minecraft/net/optifine/TextureAnimations.java
+++ b/src/minecraft/net/optifine/TextureAnimations.java
@@ -87,7 +87,7 @@ public class TextureAnimations
 
             if (atextureanimation != null)
             {
-                list.addAll(Arrays.<E>asList(atextureanimation));
+                list.addAll(Arrays.asList(atextureanimation));
             }
         }
 
diff --git a/src/minecraft/net/optifine/config/ConnectedParser.java b/src/minecraft/net/optifine/config/ConnectedParser.java
index 05dd55d..62bd952 100644
--- a/src/minecraft/net/optifine/config/ConnectedParser.java
+++ b/src/minecraft/net/optifine/config/ConnectedParser.java
@@ -19,10 +19,7 @@ import net.minecraft.init.Blocks;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.Item;
 import net.minecraft.src.Config;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.util.IStringSerializable;
-import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.*;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.optifine.ConnectedProperties;
 import net.optifine.util.EntityUtils;
@@ -96,7 +93,7 @@ public class ConnectedParser
 
                 if (amatchblock != null)
                 {
-                    list.addAll(Arrays.<E>asList(amatchblock));
+                    list.addAll(Arrays.asList(amatchblock));
                 }
             }
 
@@ -158,7 +155,7 @@ public class ConnectedParser
                 }
 
                 String s1 = astring[i];
-                String[] astring1 = (String[])Arrays.copyOfRange(astring, i + 1, astring.length);
+                String[] astring1 = JavaBackportUtil.arrayCopyOfRange(astring, i + 1, astring.length);
                 Block[] ablock = this.parseBlockPart(s, s1);
 
                 if (ablock == null)
@@ -426,7 +423,7 @@ public class ConnectedParser
         return comparable;
     }
 
-    public static Comparable getPropertyValue(String value, Collection propertyValues)
+    public static Comparable getPropertyValue(String value, Collection<Comparable> propertyValues)
     {
         for (Comparable comparable : propertyValues)
         {
@@ -977,7 +974,7 @@ public class ConnectedParser
         {
             str = str.toLowerCase().trim();
             String[] astring = Config.tokenize(str, " ");
-            T[] at = (Object[])((Object[])Array.newInstance(objs.getClass().getComponentType(), astring.length));
+            T[] at = (T[]) (Array.newInstance(objs.getClass().getComponentType(), astring.length));
 
             for (int i = 0; i < astring.length; ++i)
             {
diff --git a/src/minecraft/net/optifine/config/NbtTagValue.java b/src/minecraft/net/optifine/config/NbtTagValue.java
index 3c90a2e..225c13d 100644
--- a/src/minecraft/net/optifine/config/NbtTagValue.java
+++ b/src/minecraft/net/optifine/config/NbtTagValue.java
@@ -13,6 +13,7 @@ import net.minecraft.nbt.NBTTagLong;
 import net.minecraft.nbt.NBTTagShort;
 import net.minecraft.nbt.NBTTagString;
 import net.minecraft.src.Config;
+import net.minecraft.util.JavaBackportUtil;
 import net.optifine.util.StrUtils;
 import org.apache.commons.lang3.StringEscapeUtils;
 
@@ -41,7 +42,7 @@ public class NbtTagValue
     public NbtTagValue(String tag, String value)
     {
         String[] astring = Config.tokenize(tag, ".");
-        this.parents = (String[])Arrays.copyOfRange(astring, 0, astring.length - 1);
+        this.parents = JavaBackportUtil.arrayCopyOfRange(astring, 0, astring.length - 1);
         this.name = astring[astring.length - 1];
 
         if (value.startsWith("!"))
diff --git a/src/minecraft/net/optifine/entity/model/CustomEntityModels.java b/src/minecraft/net/optifine/entity/model/CustomEntityModels.java
index 5d74687..07ccf66 100644
--- a/src/minecraft/net/optifine/entity/model/CustomEntityModels.java
+++ b/src/minecraft/net/optifine/entity/model/CustomEntityModels.java
@@ -12,6 +12,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -19,7 +21,9 @@ import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.entity.RenderManager;
 import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
 import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
+import net.minecraft.entity.Entity;
 import net.minecraft.src.Config;
+import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.ResourceLocation;
 import net.optifine.entity.model.anim.ModelResolver;
 import net.optifine.entity.model.anim.ModelUpdater;
@@ -27,13 +31,13 @@ import net.optifine.entity.model.anim.ModelUpdater;
 public class CustomEntityModels
 {
     private static boolean active = false;
-    private static Map<Class, Render> originalEntityRenderMap = null;
-    private static Map<Class, TileEntitySpecialRenderer> originalTileEntityRenderMap = null;
+    private static Map<Class<? extends Entity>, Render<? extends Entity>> originalEntityRenderMap = null;
+    private static Map<Class<? extends TileEntity>, TileEntitySpecialRenderer<? extends TileEntity>> originalTileEntityRenderMap = null;
 
     public static void update()
     {
-        Map<Class, Render> map = getEntityRenderMap();
-        Map<Class, TileEntitySpecialRenderer> map1 = getTileEntityRenderMap();
+        Map<Class<? extends Entity>, Render<? extends Entity>> map = getEntityRenderMap();
+        Map<Class<? extends TileEntity>, TileEntitySpecialRenderer<? extends TileEntity>> map1 = getTileEntityRenderMap();
 
         if (map == null)
         {
@@ -88,10 +92,10 @@ public class CustomEntityModels
         }
     }
 
-    private static Map<Class, Render> getEntityRenderMap()
+    private static Map<Class<? extends Entity>, Render<? extends Entity>> getEntityRenderMap()
     {
         RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
-        Map<Class, Render> map = rendermanager.getEntityRenderMap();
+        Map<Class<? extends Entity>, Render<? extends Entity>> map = rendermanager.getEntityRenderMap();
 
         if (map == null)
         {
@@ -108,9 +112,9 @@ public class CustomEntityModels
         }
     }
 
-    private static Map<Class, TileEntitySpecialRenderer> getTileEntityRenderMap()
+    private static Map<Class<? extends TileEntity>, TileEntitySpecialRenderer<? extends TileEntity>> getTileEntityRenderMap()
     {
-        Map<Class, TileEntitySpecialRenderer> map = TileEntityRendererDispatcher.instance.mapSpecialRenderers;
+        Map<Class<? extends TileEntity>, TileEntitySpecialRenderer<? extends TileEntity>> map = TileEntityRendererDispatcher.instance.mapSpecialRenderers;
 
         if (originalTileEntityRenderMap == null)
         {
@@ -277,7 +281,7 @@ public class CustomEntityModels
                 if (modelrenderer.childModels != null)
                 {
                     ModelRenderer[] amodelrenderer = modelAdapter.getModelRenderers(model);
-                    Set<ModelRenderer> set = Collections.<ModelRenderer>newSetFromMap(new IdentityHashMap());
+                    Set<ModelRenderer> set = PlatformDependent.newSetFromMap(new IdentityHashMap<ModelRenderer, Boolean>());
                     set.addAll(Arrays.<ModelRenderer>asList(amodelrenderer));
                     List<ModelRenderer> list = modelrenderer.childModels;
                     Iterator iterator = list.iterator();
diff --git a/src/minecraft/net/optifine/expr/ExpressionParser.java b/src/minecraft/net/optifine/expr/ExpressionParser.java
index ee4042f..42b2959 100644
--- a/src/minecraft/net/optifine/expr/ExpressionParser.java
+++ b/src/minecraft/net/optifine/expr/ExpressionParser.java
@@ -1,13 +1,14 @@
 package net.optifine.expr;
 
 import java.io.IOException;
-import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Deque;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
 import net.minecraft.src.Config;
 
 public class ExpressionParser
@@ -59,7 +60,7 @@ public class ExpressionParser
             }
             else
             {
-                Deque<Token> deque = new ArrayDeque(Arrays.asList(atoken));
+                Deque<Token> deque = new ArrayDequeV6<Token>(Arrays.asList(atoken));
                 return this.parseInfix(deque);
             }
         }
@@ -244,7 +245,7 @@ public class ExpressionParser
 
     private FunctionType getFunctionType(Token token, Deque<Token> deque) throws ParseException
     {
-        Token token = (Token)deque.peek();
+        //Token token = (Token)deque.peek();
 
         if (token != null && token.getType() == TokenType.BRACKET_OPEN)
         {
@@ -284,8 +285,8 @@ public class ExpressionParser
         }
 
         Token token1 = (Token)deque.poll();
-        Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
-        IExpression[] aiexpression = this.parseExpressions(deque);
+        Deque<Token> deque2 = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+        IExpression[] aiexpression = this.parseExpressions(deque2);
         return makeFunction(type, aiexpression);
     }
 
@@ -295,8 +296,8 @@ public class ExpressionParser
 
         while (true)
         {
-            Deque<Token> deque = getGroup(deque, TokenType.COMMA, false);
-            IExpression iexpression = this.parseInfix(deque);
+            Deque<Token> deque2 = getGroup(deque, TokenType.COMMA, false);
+            IExpression iexpression = this.parseInfix(deque2);
 
             if (iexpression == null)
             {
@@ -372,13 +373,13 @@ public class ExpressionParser
 
     private IExpression makeBracketed(Token token, Deque<Token> deque) throws ParseException
     {
-        Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
-        return this.parseInfix(deque);
+        Deque<Token> deque2 = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+        return this.parseInfix(deque2);
     }
 
     private static Deque<Token> getGroup(Deque<Token> deque, TokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
     {
-        Deque<Token> deque = new ArrayDeque();
+        Deque<Token> deque2 = new ArrayDequeV6<Token>();
         int i = 0;
         Iterator iterator = deque.iterator();
 
@@ -389,10 +390,10 @@ public class ExpressionParser
 
             if (i == 0 && token.getType() == tokenTypeEnd)
             {
-                return deque;
+                return deque2;
             }
 
-            deque.add(token);
+            deque2.add(token);
 
             if (token.getType() == TokenType.BRACKET_OPEN)
             {
@@ -411,7 +412,7 @@ public class ExpressionParser
         }
         else
         {
-            return deque;
+            return deque2;
         }
     }
 
diff --git a/src/minecraft/net/optifine/gui/GuiMessage.java b/src/minecraft/net/optifine/gui/GuiMessage.java
index 9369ca2..bddc3c0 100644
--- a/src/minecraft/net/optifine/gui/GuiMessage.java
+++ b/src/minecraft/net/optifine/gui/GuiMessage.java
@@ -14,7 +14,7 @@ public class GuiMessage extends GuiScreen
     private GuiScreen parentScreen;
     private String messageLine1;
     private String messageLine2;
-    private final List listLines2 = Lists.newArrayList();
+    private final List<String> listLines2 = Lists.newArrayList();
     protected String confirmButtonText;
     private int ticksUntilEnable;
 
diff --git a/src/minecraft/net/optifine/gui/GuiScreenCapeOF.java b/src/minecraft/net/optifine/gui/GuiScreenCapeOF.java
index 015a222..b76bffc 100644
--- a/src/minecraft/net/optifine/gui/GuiScreenCapeOF.java
+++ b/src/minecraft/net/optifine/gui/GuiScreenCapeOF.java
@@ -73,9 +73,9 @@ public class GuiScreenCapeOF extends GuiScreenOF
                     String s3 = biginteger2.toString(16);
                     this.mc.getSessionService().joinServer(this.mc.getSession().getProfile(), s2, s3);
                     String s4 = "https://optifine.net/capeChange?u=" + s1 + "&n=" + s + "&s=" + s3;
-                    boolean flag = Config.openWebLink(new URI(s4));
+                    //boolean flag = Config.openWebLink(new URI(s4));
 
-                    if (flag)
+                    if (false)
                     {
                         this.showMessage(Lang.get("of.message.capeOF.openEditor"), 10000L);
                     }
diff --git a/src/minecraft/net/optifine/gui/TooltipManager.java b/src/minecraft/net/optifine/gui/TooltipManager.java
index c1ee739..013ff81 100644
--- a/src/minecraft/net/optifine/gui/TooltipManager.java
+++ b/src/minecraft/net/optifine/gui/TooltipManager.java
@@ -3,6 +3,8 @@ package net.optifine.gui;
 import java.awt.Rectangle;
 import java.util.Arrays;
 import java.util.List;
+
+import io.netty.util.internal.PlatformDependent;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.gui.Gui;
@@ -42,7 +44,7 @@ public class TooltipManager
                     {
                         if (astring.length > 8)
                         {
-                            astring = (String[])Arrays.copyOf(astring, 8);
+                            astring = PlatformDependent.arrayCopyOf(astring, 8);
                             astring[astring.length - 1] = astring[astring.length - 1] + " ...";
                         }
 
diff --git a/src/minecraft/net/optifine/http/HttpPipeline.java b/src/minecraft/net/optifine/http/HttpPipeline.java
index 3848210..8230507 100644
--- a/src/minecraft/net/optifine/http/HttpPipeline.java
+++ b/src/minecraft/net/optifine/http/HttpPipeline.java
@@ -12,7 +12,7 @@ import net.minecraft.src.Config;
 
 public class HttpPipeline
 {
-    private static Map mapConnections = new HashMap();
+    private static Map<String, HttpPipelineConnection> mapConnections = new HashMap<String, HttpPipelineConnection>();
     public static final String HEADER_USER_AGENT = "User-Agent";
     public static final String HEADER_HOST = "Host";
     public static final String HEADER_ACCEPT = "Accept";
diff --git a/src/minecraft/net/optifine/http/HttpPipelineReceiver.java b/src/minecraft/net/optifine/http/HttpPipelineReceiver.java
index 61307f3..084b49f 100644
--- a/src/minecraft/net/optifine/http/HttpPipelineReceiver.java
+++ b/src/minecraft/net/optifine/http/HttpPipelineReceiver.java
@@ -8,6 +8,7 @@ import java.nio.charset.Charset;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import net.minecraft.src.Config;
+import net.minecraft.util.JavaBackportUtil;
 
 public class HttpPipelineReceiver extends Thread
 {
@@ -172,7 +173,7 @@ public class HttpPipelineReceiver extends Thread
         }
 
         byte[] abyte = bytearrayoutputstream.toByteArray();
-        String s = new String(abyte, ASCII);
+        String s = JavaBackportUtil.newStringFromBytes(abyte, ASCII);
 
         if (flag)
         {
diff --git a/src/minecraft/net/optifine/http/HttpPipelineSender.java b/src/minecraft/net/optifine/http/HttpPipelineSender.java
index 7ddbf24..1a64344 100644
--- a/src/minecraft/net/optifine/http/HttpPipelineSender.java
+++ b/src/minecraft/net/optifine/http/HttpPipelineSender.java
@@ -1,5 +1,7 @@
 package net.optifine.http;
 
+import net.minecraft.util.JavaBackportUtil;
+
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.InetSocketAddress;
@@ -73,7 +75,7 @@ public class HttpPipelineSender extends Thread
 
     private void write(OutputStream out, String str) throws IOException
     {
-        byte[] abyte = str.getBytes(ASCII);
+        byte[] abyte = JavaBackportUtil.getStringBytes(str, ASCII);
         out.write(abyte);
     }
 }
diff --git a/src/minecraft/net/optifine/http/HttpUtils.java b/src/minecraft/net/optifine/http/HttpUtils.java
index 2a0c137..a09ad90 100644
--- a/src/minecraft/net/optifine/http/HttpUtils.java
+++ b/src/minecraft/net/optifine/http/HttpUtils.java
@@ -88,8 +88,9 @@ public class HttpUtils
 
             if (headers != null)
             {
-                for (String s : headers.keySet())
+                for (Object o : headers.keySet())
                 {
+                    String s = (String) o;
                     String s1 = "" + headers.get(s);
                     httpurlconnection.setRequestProperty(s, s1);
                 }
diff --git a/src/minecraft/net/optifine/model/ModelUtils.java b/src/minecraft/net/optifine/model/ModelUtils.java
index b9608d6..d99deee 100644
--- a/src/minecraft/net/optifine/model/ModelUtils.java
+++ b/src/minecraft/net/optifine/model/ModelUtils.java
@@ -29,7 +29,7 @@ public class ModelUtils
         }
     }
 
-    private static void dbgQuads(String name, List quads, String prefix)
+    private static void dbgQuads(String name, List<BakedQuad> quads, String prefix)
     {
         for (BakedQuad bakedquad : quads)
         {
@@ -79,17 +79,17 @@ public class ModelUtils
         return simplebakedmodel;
     }
 
-    public static List duplicateQuadList(List list)
+    public static List<BakedQuad> duplicateQuadList(List<BakedQuad> list)
     {
-        List list = new ArrayList();
+        List<BakedQuad> duplicatedList = new ArrayList<BakedQuad>();
 
         for (BakedQuad bakedquad : list)
         {
             BakedQuad bakedquad1 = duplicateQuad(bakedquad);
-            list.add(bakedquad1);
+            duplicatedList.add(bakedquad1);
         }
 
-        return list;
+        return duplicatedList;
     }
 
     public static BakedQuad duplicateQuad(BakedQuad quad)
diff --git a/src/minecraft/net/optifine/player/CapeUtils.java b/src/minecraft/net/optifine/player/CapeUtils.java
index e8f3731..5e6d6bb 100644
--- a/src/minecraft/net/optifine/player/CapeUtils.java
+++ b/src/minecraft/net/optifine/player/CapeUtils.java
@@ -22,7 +22,7 @@ public class CapeUtils
     {
         String s = player.getNameClear();
 
-        if (s != null && !s.isEmpty() && !s.contains("\u0000") && PATTERN_USERNAME.matcher(s).matches())
+        if (s != null && s.length() != 0 && !s.contains("\u0000") && PATTERN_USERNAME.matcher(s).matches())
         {
             String s1 = "http://s.optifine.net/capes/" + s + ".png";
             ResourceLocation resourcelocation = new ResourceLocation("capeof/" + s);
diff --git a/src/minecraft/net/optifine/shaders/BlockAliases.java b/src/minecraft/net/optifine/shaders/BlockAliases.java
index fb6014d..b40dbc3 100644
--- a/src/minecraft/net/optifine/shaders/BlockAliases.java
+++ b/src/minecraft/net/optifine/shaders/BlockAliases.java
@@ -132,8 +132,9 @@ public class BlockAliases
                 Config.dbg("[Shaders] Parsing block mappings: " + path);
                 ConnectedParser connectedparser = new ConnectedParser("Shaders");
 
-                for (String s : properties.keySet())
+                for (Object o : properties.keySet())
                 {
+                    String s = (String) o;
                     String s1 = properties.getProperty(s);
 
                     if (s.startsWith("layer."))
diff --git a/src/minecraft/net/optifine/shaders/EntityAliases.java b/src/minecraft/net/optifine/shaders/EntityAliases.java
index f37b9da..68e1a17 100644
--- a/src/minecraft/net/optifine/shaders/EntityAliases.java
+++ b/src/minecraft/net/optifine/shaders/EntityAliases.java
@@ -111,8 +111,9 @@ public class EntityAliases
                 Config.dbg("[Shaders] Parsing entity mappings: " + path);
                 ConnectedParser connectedparser = new ConnectedParser("Shaders");
 
-                for (String s : properties.keySet())
+                for (Object o : properties.keySet())
                 {
+                    String s = (String) o;
                     String s1 = properties.getProperty(s);
                     String s2 = "entity.";
 
diff --git a/src/minecraft/net/optifine/shaders/ItemAliases.java b/src/minecraft/net/optifine/shaders/ItemAliases.java
index 5afab41..360a6f2 100644
--- a/src/minecraft/net/optifine/shaders/ItemAliases.java
+++ b/src/minecraft/net/optifine/shaders/ItemAliases.java
@@ -112,8 +112,9 @@ public class ItemAliases
                 Config.dbg("[Shaders] Parsing item mappings: " + path);
                 ConnectedParser connectedparser = new ConnectedParser("Shaders");
 
-                for (String s : properties.keySet())
+                for (Object o : properties.keySet())
                 {
+                    String s = (String) o;
                     String s1 = properties.getProperty(s);
                     String s2 = "item.";
 
diff --git a/src/minecraft/net/optifine/shaders/ProgramStack.java b/src/minecraft/net/optifine/shaders/ProgramStack.java
index 08b9e0a..e271491 100644
--- a/src/minecraft/net/optifine/shaders/ProgramStack.java
+++ b/src/minecraft/net/optifine/shaders/ProgramStack.java
@@ -1,11 +1,12 @@
 package net.optifine.shaders;
 
-import java.util.ArrayDeque;
-import java.util.Deque;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
 
 public class ProgramStack
 {
-    private Deque<Program> stack = new ArrayDeque();
+    private Deque<Program> stack = new ArrayDequeV6<Program>();
 
     public void push(Program p)
     {
diff --git a/src/minecraft/net/optifine/shaders/SVertexBuilder.java b/src/minecraft/net/optifine/shaders/SVertexBuilder.java
index e079b2b..f635c3b 100644
--- a/src/minecraft/net/optifine/shaders/SVertexBuilder.java
+++ b/src/minecraft/net/optifine/shaders/SVertexBuilder.java
@@ -11,6 +11,7 @@ import net.minecraft.client.renderer.WorldRenderer;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.util.BlockPos;
 import net.minecraft.world.IBlockAccess;
+import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL20;
 
 public class SVertexBuilder
diff --git a/src/minecraft/net/optifine/shaders/ShaderPackZip.java b/src/minecraft/net/optifine/shaders/ShaderPackZip.java
index 4fbffcd..465c515 100644
--- a/src/minecraft/net/optifine/shaders/ShaderPackZip.java
+++ b/src/minecraft/net/optifine/shaders/ShaderPackZip.java
@@ -4,13 +4,14 @@ import com.google.common.base.Joiner;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.ArrayDeque;
-import java.util.Deque;
 import java.util.Enumeration;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
 import net.minecraft.src.Config;
 import net.optifine.util.StrUtils;
 
@@ -72,7 +73,7 @@ public class ShaderPackZip implements IShaderPack
 
     private String resolveRelative(String name)
     {
-        Deque<String> deque = new ArrayDeque();
+        Deque<String> deque = new ArrayDequeV6<String>();
         String[] astring = Config.tokenize(name, "/");
 
         for (int i = 0; i < astring.length; ++i)
diff --git a/src/minecraft/net/optifine/shaders/Shaders.java b/src/minecraft/net/optifine/shaders/Shaders.java
index 4267a0e..55487f7 100644
--- a/src/minecraft/net/optifine/shaders/Shaders.java
+++ b/src/minecraft/net/optifine/shaders/Shaders.java
@@ -16,11 +16,11 @@ import java.io.Writer;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
-import java.util.ArrayDeque;
+//import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.Deque;
+//import java.util.Deque;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.IdentityHashMap;
@@ -30,6 +30,9 @@ import java.util.Properties;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
@@ -55,11 +58,7 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.potion.Potion;
 import net.minecraft.src.Config;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.World;
 import net.optifine.CustomBlockLayers;
 import net.optifine.CustomColors;
@@ -104,17 +103,7 @@ import net.optifine.util.StrUtils;
 import net.optifine.util.TimedEvent;
 import org.apache.commons.io.IOUtils;
 import org.lwjgl.BufferUtils;
-import org.lwjgl.opengl.ARBGeometryShader4;
-import org.lwjgl.opengl.ARBShaderObjects;
-import org.lwjgl.opengl.ARBVertexShader;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.EXTFramebufferObject;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL14;
-import org.lwjgl.opengl.GL12;
-import org.lwjgl.opengl.GL20;
-import org.lwjgl.opengl.GL30;
-import org.lwjgl.opengl.GLContext;
+import org.lwjgl.opengl.*;
 import org.lwjgl.util.glu.GLU;
 import org.lwjgl.util.vector.Vector4f;
 
@@ -918,7 +907,7 @@ public class Shaders
         {
             name = name.trim();
 
-            if (!name.isEmpty() && !name.equals("OFF"))
+            if (name.length() != 0 && !name.equals("OFF"))
             {
                 if (name.equals("(internal)"))
                 {
@@ -1071,8 +1060,9 @@ public class Shaders
         Set set = props.keySet();
         List<ICustomTexture> list = new ArrayList();
 
-        for (String s1 : set)
+        for (Object o : set)
         {
+            String s1 = (String) o;
             if (s1.startsWith(s))
             {
                 String s2 = StrUtils.removePrefix(s1, s);
@@ -1151,7 +1141,7 @@ public class Shaders
     {
         ConnectedParser connectedparser = new ConnectedParser("Shaders");
         String[] astring = Config.tokenize(line, " ");
-        Deque<String> deque = new ArrayDeque(Arrays.asList(astring));
+        Deque<String> deque = new ArrayDequeV6<String>(Arrays.asList(astring));
         String s = (String)deque.poll();
         TextureType texturetype = (TextureType)connectedparser.parseEnum((String)deque.poll(), TextureType.values(), "texture type");
 
@@ -1913,7 +1903,7 @@ public class Shaders
 
         String s2 = activeProgram.getName();
 
-        if (s2.isEmpty())
+        if (s2.length() == 0)
         {
             s2 = "none";
         }
@@ -1925,7 +1915,7 @@ public class Shaders
         {
             String s3 = program.getName();
 
-            if (s3.isEmpty())
+            if (s3.length() == 0)
             {
                 s3 = "none";
             }
@@ -2021,7 +2011,7 @@ public class Shaders
     public static void startup(Minecraft mc)
     {
         checkShadersModInstalled();
-        mc = mc;
+        Shaders.mc = mc;
         mc = Minecraft.getMinecraft();
         capabilities = GLContext.getCapabilities();
         glVersionString = GL11.glGetString(GL11.GL_VERSION);
@@ -2421,8 +2411,6 @@ public class Shaders
 
     private static int getDrawBuffer(Program p, String str, int i)
     {
-        int i = 0;
-
         if (i >= str.length())
         {
             return i;
@@ -3231,7 +3219,7 @@ public class Shaders
                 abyte[i - 1] = 10;
             }
 
-            String s = new String(abyte, Charsets.US_ASCII);
+            String s = JavaBackportUtil.newStringFromBytes(abyte, Charsets.US_ASCII);
             s = StrUtils.trim(s, " \n\r\t");
             SMCLog.info("Info log: " + name + "\n" + s);
             return false;
@@ -4186,7 +4174,6 @@ public class Shaders
     {
         if (currentWorld != world)
         {
-            World world = currentWorld;
             currentWorld = world;
             setCameraOffset(mc.getRenderViewEntity());
             int i = getDimensionId(world);
@@ -5667,8 +5654,9 @@ public class Shaders
                         Lang.loadLocaleData(inputstream, properties);
                         inputstream.close();
 
-                        for (String s4 : properties.keySet())
+                        for (Object o : properties.keySet())
                         {
+                            String s4 = (String) o;
                             String s5 = properties.getProperty(s4);
                             shaderPackResources.put(s4, s5);
                         }
diff --git a/src/minecraft/net/optifine/shaders/ShadersTex.java b/src/minecraft/net/optifine/shaders/ShadersTex.java
index a02311c..cfc675a 100644
--- a/src/minecraft/net/optifine/shaders/ShadersTex.java
+++ b/src/minecraft/net/optifine/shaders/ShadersTex.java
@@ -843,7 +843,7 @@ public class ShadersTex
         return ((color1 >>> 24 & 255) * factor1 + (color2 >>> 24 & 255) * i) / 255 << 24 | ((color1 >>> 16 & 255) * factor1 + (color2 >>> 16 & 255) * i) / 255 << 16 | ((color1 >>> 8 & 255) * factor1 + (color2 >>> 8 & 255) * i) / 255 << 8 | ((color1 >>> 0 & 255) * factor1 + (color2 >>> 0 & 255) * i) / 255 << 0;
     }
 
-    public static void loadLayeredTexture(LayeredTexture tex, IResourceManager manager, List list)
+    public static void loadLayeredTexture(LayeredTexture tex, IResourceManager manager, List<String> list)
     {
         int i = 0;
         int j = 0;
diff --git a/src/minecraft/net/optifine/shaders/config/MacroProcessor.java b/src/minecraft/net/optifine/shaders/config/MacroProcessor.java
index 46e252d..b3bb315 100644
--- a/src/minecraft/net/optifine/shaders/config/MacroProcessor.java
+++ b/src/minecraft/net/optifine/shaders/config/MacroProcessor.java
@@ -19,7 +19,7 @@ public class MacroProcessor
         String s = Config.readInputStream(in, "ASCII");
         String s1 = getMacroHeader(s);
 
-        if (!s1.isEmpty())
+        if (s1.length() != 0)
         {
             s = s1 + s;
 
diff --git a/src/minecraft/net/optifine/shaders/config/MacroState.java b/src/minecraft/net/optifine/shaders/config/MacroState.java
index b1534cc..77020d9 100644
--- a/src/minecraft/net/optifine/shaders/config/MacroState.java
+++ b/src/minecraft/net/optifine/shaders/config/MacroState.java
@@ -1,14 +1,15 @@
 package net.optifine.shaders.config;
 
-import java.util.ArrayDeque;
 import java.util.Arrays;
-import java.util.Deque;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.StringTokenizer;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
 import net.minecraft.src.Config;
 import net.optifine.expr.ExpressionParser;
 import net.optifine.expr.ExpressionType;
@@ -21,8 +22,8 @@ import net.optifine.expr.ParseException;
 public class MacroState
 {
     private boolean active = true;
-    private Deque<Boolean> dequeState = new ArrayDeque();
-    private Deque<Boolean> dequeResolved = new ArrayDeque();
+    private Deque<Boolean> dequeState = new ArrayDequeV6<Boolean>();
+    private Deque<Boolean> dequeResolved = new ArrayDequeV6<Boolean>();
     private Map<String, String> mapMacroValues = new HashMap();
     private static final Pattern PATTERN_DIRECTIVE = Pattern.compile("\\s*#\\s*(\\w+)\\s*(.*)");
     private static final Pattern PATTERN_DEFINED = Pattern.compile("defined\\s+(\\w+)");
diff --git a/src/minecraft/net/optifine/shaders/config/ShaderPackParser.java b/src/minecraft/net/optifine/shaders/config/ShaderPackParser.java
index 14efebe..063a522 100644
--- a/src/minecraft/net/optifine/shaders/config/ShaderPackParser.java
+++ b/src/minecraft/net/optifine/shaders/config/ShaderPackParser.java
@@ -262,8 +262,9 @@ public class ShaderPackParser
         String s = "profile.";
         List<ShaderProfile> list = new ArrayList();
 
-        for (String s1 : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s1 = (String) o;
             if (s1.startsWith(s))
             {
                 String s2 = s1.substring(s.length());
@@ -295,8 +296,9 @@ public class ShaderPackParser
         Pattern pattern = Pattern.compile("program\\.([^.]+)\\.enabled");
         Map<String, IExpressionBool> map = new HashMap();
 
-        for (String s1 : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s1 = (String) o;
             Matcher matcher = pattern.matcher(s1);
 
             if (matcher.matches())
@@ -757,8 +759,9 @@ public class ShaderPackParser
         Map<String, IExpression> map = new HashMap();
         List<CustomUniform> list = new ArrayList();
 
-        for (String s4 : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s4 = (String) o;
             String[] astring = Config.tokenize(s4, ".");
 
             if (astring.length == 3)
@@ -847,8 +850,9 @@ public class ShaderPackParser
 
     public static void parseAlphaStates(Properties props)
     {
-        for (String s : props.keySet())
+        for (Object o: props.keySet())
         {
+            String s = (String) o;
             String[] astring = Config.tokenize(s, ".");
 
             if (astring.length == 2)
@@ -911,8 +915,9 @@ public class ShaderPackParser
 
     public static void parseBlendStates(Properties props)
     {
-        for (String s : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s = (String) o;
             String[] astring = Config.tokenize(s, ".");
 
             if (astring.length == 2)
@@ -986,8 +991,9 @@ public class ShaderPackParser
 
     public static void parseRenderScales(Properties props)
     {
-        for (String s : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s = (String) o;
             String[] astring = Config.tokenize(s, ".");
 
             if (astring.length == 2)
@@ -1050,8 +1056,9 @@ public class ShaderPackParser
 
     public static void parseBuffersFlip(Properties props)
     {
-        for (String s : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s = (String) o;
             String[] astring = Config.tokenize(s, ".");
 
             if (astring.length == 3)
diff --git a/src/minecraft/net/optifine/util/ArrayCache.java b/src/minecraft/net/optifine/util/ArrayCache.java
index cab1a91..149da60 100644
--- a/src/minecraft/net/optifine/util/ArrayCache.java
+++ b/src/minecraft/net/optifine/util/ArrayCache.java
@@ -1,13 +1,14 @@
 package net.optifine.util;
 
+import io.netty.util.internal.deque.ArrayDequeV6;
+
 import java.lang.reflect.Array;
-import java.util.ArrayDeque;
 
 public class ArrayCache
 {
     private Class elementClass = null;
     private int maxCacheSize = 0;
-    private ArrayDeque cache = new ArrayDeque();
+    private final ArrayDequeV6<Object> cache = new ArrayDequeV6<Object>();
 
     public ArrayCache(Class elementClass, int maxCacheSize)
     {
diff --git a/src/minecraft/net/optifine/util/CacheObjectArray.java b/src/minecraft/net/optifine/util/CacheObjectArray.java
index 8bb2bb3..125b2fe 100644
--- a/src/minecraft/net/optifine/util/CacheObjectArray.java
+++ b/src/minecraft/net/optifine/util/CacheObjectArray.java
@@ -1,13 +1,14 @@
 package net.optifine.util;
 
 import java.lang.reflect.Array;
-import java.util.ArrayDeque;
+
+import io.netty.util.internal.deque.ArrayDequeV6;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.src.Config;
 
 public class CacheObjectArray
 {
-    private static ArrayDeque<int[]> arrays = new ArrayDeque();
+    private static final ArrayDequeV6<int[]> arrays = new ArrayDequeV6<int[]>();
     private static int maxCacheSize = 10;
 
     private static synchronized int[] allocateArray(int size)
diff --git a/src/minecraft/net/optifine/util/ChunkUtils.java b/src/minecraft/net/optifine/util/ChunkUtils.java
index 153cdb3..5d7f73c 100644
--- a/src/minecraft/net/optifine/util/ChunkUtils.java
+++ b/src/minecraft/net/optifine/util/ChunkUtils.java
@@ -54,7 +54,7 @@ public class ChunkUtils
         try
         {
             Chunk chunk = new Chunk((World)null, 0, 0);
-            List list = new ArrayList();
+            List<Field> list = new ArrayList<Field>();
             List list1 = new ArrayList();
             Field[] afield = Chunk.class.getDeclaredFields();
 
diff --git a/src/minecraft/net/optifine/util/FontUtils.java b/src/minecraft/net/optifine/util/FontUtils.java
index 7ad2b52..dfd2db0 100644
--- a/src/minecraft/net/optifine/util/FontUtils.java
+++ b/src/minecraft/net/optifine/util/FontUtils.java
@@ -52,8 +52,9 @@ public class FontUtils
 
     public static void readCustomCharWidths(Properties props, float[] charWidth)
     {
-        for (String s : props.keySet())
+        for (Object o : props.keySet())
         {
+            String s = (String) o;
             String s1 = "width.";
 
             if (s.startsWith(s1))
diff --git a/src/minecraft/net/optifine/util/IteratorCache.java b/src/minecraft/net/optifine/util/IteratorCache.java
index cc49753..1f45c99 100644
--- a/src/minecraft/net/optifine/util/IteratorCache.java
+++ b/src/minecraft/net/optifine/util/IteratorCache.java
@@ -1,13 +1,14 @@
 package net.optifine.util;
 
-import java.util.ArrayDeque;
-import java.util.Deque;
+import io.netty.util.internal.deque.ArrayDequeV6;
+import io.netty.util.internal.deque.Deque;
+
 import java.util.Iterator;
 import java.util.List;
 
 public class IteratorCache
 {
-    private static Deque<IteratorCache.IteratorReusable<Object>> dequeIterators = new ArrayDeque();
+    private static final Deque<IteratorReusable<Object>> dequeIterators = new ArrayDequeV6<IteratorReusable<Object>>();
 
     public static Iterator<Object> getReadOnly(List list)
     {
@@ -31,7 +32,7 @@ public class IteratorCache
         {
             if (dequeIterators.size() <= 1000)
             {
-                iterator.setList((List<E>)null);
+                iterator.setList(null);
                 dequeIterators.addLast(iterator);
             }
         }
diff --git a/src/minecraft/net/optifine/util/LinkedList.java b/src/minecraft/net/optifine/util/LinkedList.java
index b5a6187..edb9049 100644
--- a/src/minecraft/net/optifine/util/LinkedList.java
+++ b/src/minecraft/net/optifine/util/LinkedList.java
@@ -19,9 +19,9 @@ public class LinkedList<T>
         }
         else
         {
-            LinkedList.Node<T> node = this.first;
-            node.setNext(node);
-            node.setPrev(node);
+            LinkedList.Node<T> nodeFirst = this.first;
+            node.setNext(nodeFirst);
+            nodeFirst.setPrev(node);
             this.first = node;
         }
 
@@ -40,9 +40,9 @@ public class LinkedList<T>
         }
         else
         {
-            LinkedList.Node<T> node = this.last;
-            node.setPrev(node);
-            node.setNext(node);
+            LinkedList.Node<T> nodeLast = this.last;
+            node.setPrev(nodeLast);
+            nodeLast.setNext(node);
             this.last = node;
         }
 
@@ -64,10 +64,10 @@ public class LinkedList<T>
         {
             this.checkParent(nodePrev);
             this.checkNoParent(node);
-            LinkedList.Node<T> node = nodePrev.getNext();
-            nodePrev.setNext(node);
+            LinkedList.Node<T> nodeNext = nodePrev.getNext();
+            nodePrev.setNext(nodeNext);
             node.setPrev(nodePrev);
-            node.setPrev(node);
+            nodeNext.setPrev(node);
             node.setNext(node);
             node.setParent(this);
             ++this.size;
@@ -77,12 +77,12 @@ public class LinkedList<T>
     public LinkedList.Node<T> remove(LinkedList.Node<T> node)
     {
         this.checkParent(node);
-        LinkedList.Node<T> node = node.getPrev();
+        LinkedList.Node<T> nodePrev = node.getPrev();
         LinkedList.Node<T> node1 = node.getNext();
 
-        if (node != null)
+        if (nodePrev != null)
         {
-            node.setNext(node1);
+            nodePrev.setNext(node1);
         }
         else
         {
@@ -91,7 +91,7 @@ public class LinkedList<T>
 
         if (node1 != null)
         {
-            node1.setPrev(node);
+            node1.setPrev(nodePrev);
         }
         else
         {
@@ -213,8 +213,8 @@ public class LinkedList<T>
     {
         StringBuffer stringbuffer = new StringBuffer();
 
-        for (LinkedList.Node<T> node : this)
-        {
+        for (Iterator<Node<T>> it = this.iterator(); it.hasNext(); ) {
+            Node<T> node = it.next();
             if (stringbuffer.length() > 0)
             {
                 stringbuffer.append(", ");
diff --git a/src/minecraft/net/optifine/util/LinkedListTest.java b/src/minecraft/net/optifine/util/LinkedListTest.java
index 10d4cf1..5e922e0 100644
--- a/src/minecraft/net/optifine/util/LinkedListTest.java
+++ b/src/minecraft/net/optifine/util/LinkedListTest.java
@@ -1,6 +1,7 @@
 package net.optifine.util;
 
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import net.optifine.render.VboRange;
@@ -82,8 +83,8 @@ public class LinkedListTest
     {
         StringBuffer stringbuffer = new StringBuffer();
 
-        for (LinkedList.Node<VboRange> node : linkedList)
-        {
+        for (Iterator<LinkedList.Node<VboRange>> it = linkedList.iterator(); it.hasNext(); ) {
+            LinkedList.Node<VboRange> node = it.next();
             VboRange vborange = (VboRange)node.getItem();
 
             if (stringbuffer.length() > 0)
diff --git a/src/minecraft/net/optifine/util/NativeMemory.java b/src/minecraft/net/optifine/util/NativeMemory.java
index ed520d5..df79ebc 100644
--- a/src/minecraft/net/optifine/util/NativeMemory.java
+++ b/src/minecraft/net/optifine/util/NativeMemory.java
@@ -63,9 +63,9 @@ public class NativeMemory
             for (int i = 2; i < path.length; ++i)
             {
                 String s = path[i];
-                object = method.invoke(object, new Object[0]);
-                method = object.getClass().getMethod(s, new Class[0]);
-                method.setAccessible(true);
+                Object object2 = method.invoke(object, new Object[0]);
+                Method method2 = object2.getClass().getMethod(s, new Class[0]);
+                method2.setAccessible(true);
             }
 
             LongSupplier longsupplier = new LongSupplier()
diff --git a/src/minecraft/net/optifine/util/ResUtils.java b/src/minecraft/net/optifine/util/ResUtils.java
index 4529b90..fb09ce2 100644
--- a/src/minecraft/net/optifine/util/ResUtils.java
+++ b/src/minecraft/net/optifine/util/ResUtils.java
@@ -202,7 +202,7 @@ public class ResUtils
 
     private static boolean isLowercase(String str)
     {
-        return str.equals(str.toLowerCase(Locale.ROOT));
+        return str.equals(str.toLowerCase(Locale.ENGLISH));
     }
 
     public static Properties readProperties(String path, String module)
diff --git a/src/minecraft/optifine/AccessFixer.java b/src/minecraft/optifine/AccessFixer.java
deleted file mode 100644
index 80d9032..0000000
--- a/src/minecraft/optifine/AccessFixer.java
+++ /dev/null
@@ -1,204 +0,0 @@
-package optifine;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Spliterators;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import java.util.function.Predicate;
-import java.util.stream.StreamSupport;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.FieldNode;
-import org.objectweb.asm.tree.InnerClassNode;
-import org.objectweb.asm.tree.MethodInsnNode;
-import org.objectweb.asm.tree.MethodNode;
-
-public class AccessFixer
-{
-    private static final Logger LOGGER = LogManager.getLogger();
-
-    public static void fixMemberAccess(ClassNode classOld, ClassNode classNew)
-    {
-        List<FieldNode> list = classOld.fields;
-        List<FieldNode> list1 = classNew.fields;
-        Map<String, FieldNode> map = getMapFields(list);
-
-        for (FieldNode fieldnode : list1)
-        {
-            String s = fieldnode.name;
-            FieldNode fieldnode1 = (FieldNode)map.get(s);
-
-            if (fieldnode1 != null && fieldnode.access != fieldnode1.access)
-            {
-                fieldnode.access = combineAccess(fieldnode.access, fieldnode1.access);
-            }
-        }
-
-        List<MethodNode> list2 = classOld.methods;
-        List<MethodNode> list3 = classNew.methods;
-        Map<String, MethodNode> map1 = getMapMethods(list2);
-        Set<String> set = new HashSet();
-
-        for (MethodNode methodnode : list3)
-        {
-            String s1 = methodnode.name + methodnode.desc;
-            MethodNode methodnode1 = (MethodNode)map1.get(s1);
-
-            if (methodnode1 != null && methodnode.access != methodnode1.access)
-            {
-                int i = methodnode.access;
-                methodnode.access = combineAccess(methodnode.access, methodnode1.access);
-
-                if (isSet(i, 2) && !isSet(methodnode.access, 2) && !isSet(methodnode.access, 8) && !methodnode.name.equals("<init>"))
-                {
-                    set.add(methodnode.name + methodnode.desc);
-                }
-            }
-        }
-
-        if (!set.isEmpty())
-        {
-            List<MethodInsnNode> list4 = new ArrayList();
-            classNew.methods.forEach((mn) ->
-            {
-                StreamSupport.stream(Spliterators.spliteratorUnknownSize(mn.instructions.iterator(), 16), false).filter((i) -> {
-                    return i.getOpcode() == 183;
-                }).map(MethodInsnNode.class::cast).filter((m) -> {
-                    return privateChanged.contains(m.name + m.desc);
-                }).forEach((m) -> {
-                    m.setOpcode(182);
-                    changed.add(m);
-                });
-            });
-        }
-
-        List<InnerClassNode> list5 = classOld.innerClasses;
-        List<InnerClassNode> list6 = classNew.innerClasses;
-        Map<String, InnerClassNode> map2 = getMapInnerClasses(list5);
-
-        for (InnerClassNode innerclassnode1 : list6)
-        {
-            String s2 = innerclassnode1.name;
-            InnerClassNode innerclassnode = (InnerClassNode)map2.get(s2);
-
-            if (innerclassnode != null && innerclassnode1.access != innerclassnode.access)
-            {
-                int j = combineAccess(innerclassnode1.access, innerclassnode.access);
-                innerclassnode1.access = j;
-            }
-        }
-
-        if (classNew.access != classOld.access)
-        {
-            int k = combineAccess(classNew.access, classOld.access);
-            classNew.access = k;
-        }
-    }
-
-    private static int combineAccess(int access, int access2)
-    {
-        if (access == access2)
-        {
-            return access;
-        }
-        else
-        {
-            int int = 7;
-            int int = access & ~int;
-
-            if (!isSet(access, 16) || !isSet(access2, 16))
-            {
-                int &= -17;
-            }
-
-            return !isSet(access, 1) && !isSet(access2, 1) ? (!isSet(access, 4) && !isSet(access2, 4) ? (!isSet(access, 2) && !isSet(access2, 2) ? int : int | 2) : int | 4) : int | 1;
-        }
-    }
-
-    private static boolean isSet(int access, int flag)
-    {
-        return (access & flag) != 0;
-    }
-
-    public static Map<String, FieldNode> getMapFields(List<FieldNode> fields)
-    {
-        Map<String, FieldNode> map = new LinkedHashMap();
-
-        for (FieldNode fieldnode : fields)
-        {
-            String string = fieldnode.name;
-            map.put(string, fieldnode);
-        }
-
-        return map;
-    }
-
-    public static Map<String, MethodNode> getMapMethods(List<MethodNode> methods)
-    {
-        Map<String, MethodNode> map = new LinkedHashMap();
-
-        for (MethodNode methodnode : methods)
-        {
-            String string = methodnode.name + methodnode.desc;
-            map.put(string, methodnode);
-        }
-
-        return map;
-    }
-
-    public static Map<String, InnerClassNode> getMapInnerClasses(List<InnerClassNode> innerClasses)
-    {
-        Map<String, InnerClassNode> map = new LinkedHashMap();
-
-        for (InnerClassNode innerclassnode : innerClasses)
-        {
-            String string = innerclassnode.name;
-            map.put(string, innerclassnode);
-        }
-
-        return map;
-    }
-
-    private static String toString(int access)
-    {
-        StringBuffer stringbuffer = new StringBuffer();
-
-        if (isSet(access, 1))
-        {
-            addToBuffer(stringbuffer, "public", " ");
-        }
-
-        if (isSet(access, 4))
-        {
-            addToBuffer(stringbuffer, "protected", " ");
-        }
-
-        if (isSet(access, 2))
-        {
-            addToBuffer(stringbuffer, "private", " ");
-        }
-
-        if (isSet(access, 16))
-        {
-            addToBuffer(stringbuffer, "final", " ");
-        }
-
-        return stringbuffer.toString();
-    }
-
-    private static void addToBuffer(StringBuffer sb, String val, String separator)
-    {
-        if (sb.length() > 0)
-        {
-            sb.append(separator);
-        }
-
-        sb.append(val);
-    }
-}
diff --git a/src/minecraft/optifine/Differ.java b/src/minecraft/optifine/Differ.java
deleted file mode 100644
index 3423389..0000000
--- a/src/minecraft/optifine/Differ.java
+++ /dev/null
@@ -1,232 +0,0 @@
-package optifine;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.regex.Pattern;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import java.util.zip.ZipOutputStream;
-import optifine.xdelta.Delta;
-import optifine.xdelta.DeltaException;
-import optifine.xdelta.DiffWriter;
-import optifine.xdelta.GDiffWriter;
-
-public class Differ
-{
-    public static void main(String[] args)
-    {
-        if (args.length < 3)
-        {
-            Utils.dbg("Usage: Differ <base.jar> <mod.jar> <diff.jar>");
-        }
-        else
-        {
-            File file1 = new File(args[0]);
-            File file2 = new File(args[1]);
-            File file3 = new File(args[2]);
-
-            try
-            {
-                if (file1.getName().equals("AUTO"))
-                {
-                    file1 = detectBaseFile(file2);
-                }
-
-                if (!file1.exists() || !file1.isFile())
-                {
-                    throw new IOException("Base file not found: " + file1);
-                }
-
-                if (!file2.exists() || !file2.isFile())
-                {
-                    throw new IOException("Mod file not found: " + file2);
-                }
-
-                process(file1, file2, file3);
-            }
-            catch (Exception exception)
-            {
-                exception.printStackTrace();
-                System.exit(1);
-            }
-        }
-    }
-
-    private static void process(File baseFile, File modFile, File diffFile) throws IOException, DeltaException, NoSuchAlgorithmException
-    {
-        ZipFile zipfile = new ZipFile(modFile);
-        Map<String, String> map = Patcher.getConfigurationMap(zipfile);
-        Pattern[] apattern = Patcher.getConfigurationPatterns(map);
-        ZipOutputStream zipoutputstream = new ZipOutputStream(new FileOutputStream(diffFile));
-        ZipFile zipfile1 = new ZipFile(baseFile);
-        Enumeration enumeration = zipfile.entries();
-        Map<String, Map<String, Integer>> map1 = new HashMap();
-
-        while (enumeration.hasMoreElements())
-        {
-            ZipEntry zipentry = (ZipEntry)enumeration.nextElement();
-
-            if (!zipentry.isDirectory())
-            {
-                InputStream inputstream = zipfile.getInputStream(zipentry);
-                byte[] abyte = Utils.readAll(inputstream);
-                String s = zipentry.getName();
-                byte[] abyte1 = makeDiff(s, abyte, apattern, map, zipfile1);
-
-                if (abyte1 != abyte)
-                {
-                    ZipEntry zipentry1 = new ZipEntry("patch/" + s + ".xdelta");
-                    zipoutputstream.putNextEntry(zipentry1);
-                    zipoutputstream.write(abyte1);
-                    zipoutputstream.closeEntry();
-                    addStat(map1, s, "delta");
-                    byte[] abyte2 = HashUtils.getHashMd5(abyte);
-                    String s1 = HashUtils.toHexString(abyte2);
-                    byte[] abyte3 = s1.getBytes("ASCII");
-                    ZipEntry zipentry2 = new ZipEntry("patch/" + s + ".md5");
-                    zipoutputstream.putNextEntry(zipentry2);
-                    zipoutputstream.write(abyte3);
-                    zipoutputstream.closeEntry();
-                }
-                else
-                {
-                    ZipEntry zipentry3 = new ZipEntry(s);
-                    zipoutputstream.putNextEntry(zipentry3);
-                    zipoutputstream.write(abyte);
-                    zipoutputstream.closeEntry();
-                    addStat(map1, s, "same");
-                }
-            }
-        }
-
-        zipoutputstream.close();
-        printStats(map1);
-    }
-
-    private static void printStats(Map<String, Map<String, Integer>> mapStats)
-    {
-        List<String> list = new ArrayList(mapStats.keySet());
-        Collections.sort(list);
-
-        for (String s : list)
-        {
-            Map<String, Integer> map = (Map)mapStats.get(s);
-            List<String> list1 = new ArrayList(map.keySet());
-            Collections.sort(list1);
-            String s1 = "";
-
-            for (String s2 : list1)
-            {
-                Integer integer = (Integer)map.get(s2);
-
-                if (s1.length() > 0)
-                {
-                    s1 = s1 + ", ";
-                }
-
-                s1 = s1 + s2 + " " + integer;
-            }
-
-            Utils.dbg(s + " = " + s1);
-        }
-    }
-
-    private static void addStat(Map<String, Map<String, Integer>> mapStats, String name, String type)
-    {
-        int i = name.lastIndexOf(47);
-        String s = "";
-
-        if (i >= 0)
-        {
-            s = name.substring(0, i);
-        }
-
-        Map<String, Integer> map = (Map)mapStats.get(s);
-
-        if (map == null)
-        {
-            map = new HashMap();
-            mapStats.put(s, map);
-        }
-
-        Integer integer = (Integer)map.get(type);
-
-        if (integer == null)
-        {
-            integer = new Integer(0);
-        }
-
-        integer = new Integer(integer.intValue() + 1);
-        map.put(type, integer);
-    }
-
-    public static byte[] makeDiff(String name, byte[] bytesMod, Pattern[] patterns, Map<String, String> cfgMap, ZipFile zipBase) throws IOException, DeltaException
-    {
-        String s = Patcher.getPatchBase(name, patterns, cfgMap);
-
-        if (s == null)
-        {
-            return bytesMod;
-        }
-        else
-        {
-            ZipEntry zipentry = zipBase.getEntry(s);
-
-            if (zipentry == null)
-            {
-                throw new IOException("Base entry not found: " + s + " in: " + zipBase.getName());
-            }
-            else
-            {
-                InputStream inputstream = zipBase.getInputStream(zipentry);
-                byte[] abyte = Utils.readAll(inputstream);
-                ByteArrayInputStream bytearrayinputstream = new ByteArrayInputStream(bytesMod);
-                ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
-                DiffWriter diffwriter = new GDiffWriter(new DataOutputStream(bytearrayoutputstream));
-                Delta.computeDelta((byte[])abyte, bytearrayinputstream, bytesMod.length, diffwriter);
-                diffwriter.close();
-                return bytearrayoutputstream.toByteArray();
-            }
-        }
-    }
-
-    public static File detectBaseFile(File modFile) throws IOException
-    {
-        ZipFile zipfile = new ZipFile(modFile);
-        String s = Installer.getOptiFineVersion(zipfile);
-
-        if (s == null)
-        {
-            throw new IOException("Version not found");
-        }
-        else
-        {
-            zipfile.close();
-            String s1 = Installer.getMinecraftVersionFromOfVersion(s);
-
-            if (s1 == null)
-            {
-                throw new IOException("Version not found");
-            }
-            else
-            {
-                File file1 = Utils.getWorkingDirectory();
-                File file2 = new File(file1, "versions/" + s1 + "/" + s1 + ".jar");
-                Utils.dbg("BaseFile: " + file2);
-                return file2;
-            }
-        }
-    }
-}
diff --git a/src/minecraft/optifine/Installer.java b/src/minecraft/optifine/Installer.java
deleted file mode 100644
index 5d2cff5..0000000
--- a/src/minecraft/optifine/Installer.java
+++ /dev/null
@@ -1,629 +0,0 @@
-package optifine;
-
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.Font;
-import java.io.CharArrayWriter;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStreamWriter;
-import java.net.URI;
-import java.net.URL;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Enumeration;
-import java.util.Locale;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import javax.swing.JFileChooser;
-import javax.swing.JOptionPane;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
-import optifine.json.JSONArray;
-import optifine.json.JSONObject;
-import optifine.json.JSONParser;
-import optifine.json.JSONWriter;
-import optifine.json.ParseException;
-
-public class Installer
-{
-    public static void main(String[] args)
-    {
-        try
-        {
-            File file1 = Utils.getWorkingDirectory();
-            doInstall(file1);
-        }
-        catch (Exception exception)
-        {
-            String s = exception.getMessage();
-
-            if (s != null && s.equals("QUIET"))
-            {
-                return;
-            }
-
-            exception.printStackTrace();
-            String s1 = Utils.getExceptionStackTrace(exception);
-            s1 = s1.replace("\t", "  ");
-            JTextArea jtextarea = new JTextArea(s1);
-            jtextarea.setEditable(false);
-            Font font = jtextarea.getFont();
-            Font font1 = new Font("Monospaced", font.getStyle(), font.getSize());
-            jtextarea.setFont(font1);
-            JScrollPane jscrollpane = new JScrollPane(jtextarea);
-            jscrollpane.setPreferredSize(new Dimension(600, 400));
-            JOptionPane.showMessageDialog((Component)null, jscrollpane, "Error", 0);
-        }
-    }
-
-    public static void doInstall(File dirMc) throws Exception
-    {
-        Utils.dbg("Dir minecraft: " + dirMc);
-        File file1 = new File(dirMc, "libraries");
-        Utils.dbg("Dir libraries: " + file1);
-        File file2 = new File(dirMc, "versions");
-        Utils.dbg("Dir versions: " + file2);
-        String s = getOptiFineVersion();
-        Utils.dbg("OptiFine Version: " + s);
-        String[] astring = Utils.tokenize(s, "_");
-        String s1 = astring[1];
-        Utils.dbg("Minecraft Version: " + s1);
-        String s2 = getOptiFineEdition(astring);
-        Utils.dbg("OptiFine Edition: " + s2);
-        String s3 = s1 + "-OptiFine_" + s2;
-        Utils.dbg("Minecraft_OptiFine Version: " + s3);
-        copyMinecraftVersion(s1, s3, file2);
-        installOptiFineLibrary(s1, s2, file1, false);
-        installLaunchwrapperLibrary(s1, s2, file1);
-        updateJson(file2, s3, file1, s1, s2);
-        updateLauncherJson(dirMc, s3);
-        updateLauncherStateJson(dirMc, s3);
-    }
-
-    public static boolean doExtract(File dirMc) throws Exception
-    {
-        Utils.dbg("Dir minecraft: " + dirMc);
-        File file1 = new File(dirMc, "libraries");
-        Utils.dbg("Dir libraries: " + file1);
-        File file2 = new File(dirMc, "versions");
-        Utils.dbg("Dir versions: " + file2);
-        String s = getOptiFineVersion();
-        Utils.dbg("OptiFine Version: " + s);
-        String[] astring = Utils.tokenize(s, "_");
-        String s1 = astring[1];
-        Utils.dbg("Minecraft Version: " + s1);
-        String s2 = getOptiFineEdition(astring);
-        Utils.dbg("OptiFine Edition: " + s2);
-        String s3 = s1 + "-OptiFine_" + s2;
-        Utils.dbg("Minecraft_OptiFine Version: " + s3);
-        return installOptiFineLibrary(s1, s2, file1, true);
-    }
-
-    private static void updateLauncherJson(File dirMc, String mcVerOf) throws IOException, ParseException
-    {
-        File file1 = new File(dirMc, "launcher_profiles.json");
-
-        if (file1.exists() && file1.isFile())
-        {
-            String s = Utils.readFile(file1, "UTF-8");
-            JSONParser jsonparser = new JSONParser();
-            JSONObject jsonobject = (JSONObject)jsonparser.parse(s);
-            JSONObject jsonobject1 = (JSONObject)jsonobject.get("profiles");
-            JSONObject jsonobject2 = (JSONObject)jsonobject1.get("OptiFine");
-
-            if (jsonobject2 == null)
-            {
-                jsonobject2 = new JSONObject();
-                jsonobject2.put("name", "OptiFine");
-                jsonobject2.put("created", formatDateMs(new Date()));
-                jsonobject1.put("OptiFine", jsonobject2);
-            }
-
-            jsonobject2.put("type", "custom");
-            jsonobject2.put("lastVersionId", mcVerOf);
-            jsonobject2.put("lastUsed", formatDateMs(new Date()));
-            jsonobject2.put("icon", ProfileIcon.DATA);
-            jsonobject.put("selectedProfile", "OptiFine");
-            FileOutputStream fileoutputstream = new FileOutputStream(file1);
-            OutputStreamWriter outputstreamwriter = new OutputStreamWriter(fileoutputstream, "UTF-8");
-            JSONWriter jsonwriter = new JSONWriter(outputstreamwriter);
-            jsonwriter.writeObject(jsonobject);
-            outputstreamwriter.flush();
-            outputstreamwriter.close();
-        }
-        else
-        {
-            Utils.showErrorMessage("File not found: " + file1);
-            throw new RuntimeException("QUIET");
-        }
-    }
-
-    private static void updateLauncherStateJson(File dirMc, String mcVerOf)
-    {
-        try
-        {
-            File file1 = new File(dirMc, "launcher_ui_state.json");
-
-            if (!file1.exists() || !file1.isFile())
-            {
-                return;
-            }
-
-            String s = Utils.readFile(file1, "UTF-8");
-            JSONObject jsonobject = parseJson(s);
-            JSONObject jsonobject1 = (JSONObject)jsonobject.get("data");
-
-            if (jsonobject1 == null)
-            {
-                jsonobject1 = new JSONObject();
-                jsonobject.put("data", jsonobject1);
-            }
-
-            String s1 = (String)jsonobject1.get("UiEvents");
-
-            if (s1 == null)
-            {
-                s1 = "{}";
-            }
-
-            JSONObject jsonobject2 = parseJson(s1);
-            JSONObject jsonobject3 = (JSONObject)jsonobject2.get("hidePlayerSafetyDisclaimer");
-
-            if (jsonobject3 == null)
-            {
-                jsonobject3 = new JSONObject();
-                jsonobject2.put("hidePlayerSafetyDisclaimer", jsonobject3);
-            }
-
-            String s2 = mcVerOf + "_OptiFine";
-            jsonobject3.put(s2, Boolean.TRUE);
-            s1 = jsonToString(jsonobject2, true);
-            jsonobject1.put("UiEvents", s1);
-            String s3 = (String)jsonobject1.get("UiSettings");
-
-            if (s3 != null)
-            {
-                JSONObject jsonobject4 = parseJson(s3);
-                JSONObject jsonobject5 = (JSONObject)jsonobject4.get("javaConfigurationFilter");
-
-                if (jsonobject5 != null)
-                {
-                    jsonobject5.put("modded", Boolean.TRUE);
-                    s3 = jsonToString(jsonobject4, true);
-                    jsonobject1.put("UiSettings", s3);
-                }
-            }
-
-            FileOutputStream fileoutputstream = new FileOutputStream(file1);
-            OutputStreamWriter outputstreamwriter = new OutputStreamWriter(fileoutputstream, "UTF-8");
-            JSONWriter jsonwriter = new JSONWriter(outputstreamwriter);
-            jsonwriter.writeObject(jsonobject);
-            outputstreamwriter.flush();
-            outputstreamwriter.close();
-        }
-        catch (Exception exception)
-        {
-            exception.printStackTrace();
-        }
-    }
-
-    public static JSONObject parseJson(String str) throws ParseException
-    {
-        JSONParser jsonparser = new JSONParser();
-        JSONObject jsonobject = (JSONObject)jsonparser.parse(str);
-        return jsonobject;
-    }
-
-    public static String jsonToString(JSONObject json, boolean oneLine) throws IOException
-    {
-        CharArrayWriter chararraywriter = new CharArrayWriter();
-        int i = oneLine ? 0 : 2;
-        JSONWriter jsonwriter = new JSONWriter(chararraywriter, i);
-        jsonwriter.writeObject(json);
-        chararraywriter.close();
-        String s = chararraywriter.toString();
-
-        if (oneLine)
-        {
-            s = s.replace("\n", "");
-        }
-
-        return s;
-    }
-
-    private static void updateJson(File dirMcVers, String mcVerOf, File dirMcLib, String mcVer, String ofEd) throws IOException, ParseException
-    {
-        File file1 = new File(dirMcVers, mcVerOf);
-        File file2 = new File(file1, mcVerOf + ".json");
-        String s = Utils.readFile(file2, "UTF-8");
-        JSONParser jsonparser = new JSONParser();
-        JSONObject jsonobject = (JSONObject)jsonparser.parse(s);
-        JSONObject jsonobject1 = new JSONObject();
-        jsonobject1.put("id", mcVerOf);
-        jsonobject1.put("inheritsFrom", mcVer);
-        jsonobject1.put("time", formatDate(new Date()));
-        jsonobject1.put("releaseTime", formatDate(new Date()));
-        jsonobject1.put("type", "release");
-        JSONArray jsonarray = new JSONArray();
-        jsonobject1.put("libraries", jsonarray);
-        String s1 = (String)jsonobject.get("mainClass");
-
-        if (!s1.startsWith("net.minecraft.launchwrapper."))
-        {
-            s1 = "net.minecraft.launchwrapper.Launch";
-            jsonobject1.put("mainClass", s1);
-            String s2 = (String)jsonobject.get("minecraftArguments");
-
-            if (s2 != null)
-            {
-                s2 = s2 + "  --tweakClass optifine.OptiFineTweaker";
-                jsonobject1.put("minecraftArguments", s2);
-            }
-            else
-            {
-                jsonobject1.put("minimumLauncherVersion", "21");
-                JSONObject jsonobject2 = new JSONObject();
-                JSONArray jsonarray1 = new JSONArray();
-                jsonarray1.add("--tweakClass");
-                jsonarray1.add("optifine.OptiFineTweaker");
-                jsonobject2.put("game", jsonarray1);
-                jsonobject1.put("arguments", jsonobject2);
-            }
-
-            JSONObject jsonobject4 = new JSONObject();
-            jsonobject4.put("name", "optifine:launchwrapper-of:" + getLaunchwrapperVersion());
-            jsonarray.add(0, jsonobject4);
-        }
-
-        JSONObject jsonobject3 = new JSONObject();
-        jsonobject3.put("name", "optifine:OptiFine:" + mcVer + "_" + ofEd);
-        jsonarray.add(0, jsonobject3);
-        FileOutputStream fileoutputstream = new FileOutputStream(file2);
-        OutputStreamWriter outputstreamwriter = new OutputStreamWriter(fileoutputstream, "UTF-8");
-        JSONWriter jsonwriter = new JSONWriter(outputstreamwriter);
-        jsonwriter.writeObject(jsonobject1);
-        outputstreamwriter.flush();
-        outputstreamwriter.close();
-    }
-
-    private static Object formatDate(Date date)
-    {
-        try
-        {
-            SimpleDateFormat simpledateformat = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm:ssXXX");
-            String s1 = simpledateformat.format(date);
-            return s1;
-        }
-        catch (Exception var4)
-        {
-            SimpleDateFormat simpledateformat1 = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm:ss");
-            String s = simpledateformat1.format(date);
-            return s;
-        }
-    }
-
-    private static Object formatDateMs(Date date)
-    {
-        SimpleDateFormat simpledateformat = new SimpleDateFormat("YYYY-MM-dd\'T\'HH:mm:ss.SSS\'Z\'");
-        String s = simpledateformat.format(date);
-        return s;
-    }
-
-    public static String getOptiFineEdition(String[] ofVers)
-    {
-        if (ofVers.length <= 2)
-        {
-            return "";
-        }
-        else
-        {
-            String s = "";
-
-            for (int i = 2; i < ofVers.length; ++i)
-            {
-                if (i > 2)
-                {
-                    s = s + "_";
-                }
-
-                s = s + ofVers[i];
-            }
-
-            return s;
-        }
-    }
-
-    private static boolean installOptiFineLibrary(String mcVer, String ofEd, File dirMcLib, boolean selectTarget) throws Exception
-    {
-        File file1 = getOptiFineZipFile();
-        File file2 = new File(dirMcLib, "optifine/OptiFine/" + mcVer + "_" + ofEd);
-        File file3 = new File(file2, "OptiFine-" + mcVer + "_" + ofEd + ".jar");
-
-        if (selectTarget)
-        {
-            file3 = new File(file1.getParentFile(), "OptiFine_" + mcVer + "_" + ofEd + "_MOD.jar");
-            JFileChooser jfilechooser = new JFileChooser(file3.getParentFile());
-            jfilechooser.setSelectedFile(file3);
-            int i = jfilechooser.showSaveDialog((Component)null);
-
-            if (i != 0)
-            {
-                return false;
-            }
-
-            file3 = jfilechooser.getSelectedFile();
-
-            if (file3.exists())
-            {
-                JOptionPane.setDefaultLocale(Locale.ENGLISH);
-                int j = JOptionPane.showConfirmDialog((Component)null, "The file \"" + file3.getName() + "\" already exists.\nDo you want to overwrite it?", "Save", 1);
-
-                if (j != 0)
-                {
-                    return false;
-                }
-            }
-        }
-
-        if (file3.equals(file1))
-        {
-            JOptionPane.showMessageDialog((Component)null, "Source and target file are the same.", "Save", 0);
-            return false;
-        }
-        else
-        {
-            Utils.dbg("Source: " + file1);
-            Utils.dbg("Dest: " + file3);
-            File file4 = dirMcLib.getParentFile();
-            File file5 = new File(file4, "versions/" + mcVer + "/" + mcVer + ".jar");
-
-            if (!file5.exists())
-            {
-                showMessageVersionNotFound(mcVer);
-                throw new RuntimeException("QUIET");
-            }
-            else
-            {
-                if (file3.getParentFile() != null)
-                {
-                    file3.getParentFile().mkdirs();
-                }
-
-                Patcher.process(file5, file1, file3);
-                return true;
-            }
-        }
-    }
-
-    private static boolean installLaunchwrapperLibrary(String mcVer, String ofEd, File dirMcLib) throws Exception
-    {
-        String s = getLaunchwrapperVersion();
-        String s1 = "launchwrapper-of-" + s + ".jar";
-        File file1 = new File(dirMcLib, "optifine/launchwrapper-of/" + s);
-        File file2 = new File(file1, s1);
-        Utils.dbg("Source: " + s1);
-        Utils.dbg("Dest: " + file2);
-        InputStream inputstream = Installer.class.getResourceAsStream("/" + s1);
-
-        if (inputstream == null)
-        {
-            throw new IOException("File not found: " + s1);
-        }
-        else
-        {
-            if (file2.getParentFile() != null)
-            {
-                file2.getParentFile().mkdirs();
-            }
-
-            FileOutputStream fileoutputstream = new FileOutputStream(file2);
-            Utils.copyAll(inputstream, fileoutputstream);
-            fileoutputstream.flush();
-            inputstream.close();
-            fileoutputstream.close();
-            return true;
-        }
-    }
-
-    public static File getOptiFineZipFile() throws Exception
-    {
-        URL url = Installer.class.getProtectionDomain().getCodeSource().getLocation();
-        Utils.dbg("URL: " + url);
-        URI uri = url.toURI();
-        File file1 = new File(uri);
-        return file1;
-    }
-
-    public static boolean isPatchFile() throws Exception
-    {
-        File file1 = getOptiFineZipFile();
-        ZipFile zipfile = new ZipFile(file1);
-
-        try
-        {
-            Enumeration<ZipEntry> enumeration = zipfile.entries();
-
-            while (enumeration.hasMoreElements())
-            {
-                ZipEntry zipentry = (ZipEntry)enumeration.nextElement();
-
-                if (zipentry.getName().startsWith("patch/"))
-                {
-                    return true;
-                }
-            }
-
-            return false;
-        }
-        finally
-        {
-            zipfile.close();
-        }
-    }
-
-    private static void copyMinecraftVersion(String mcVer, String mcVerOf, File dirMcVer) throws IOException
-    {
-        File file1 = new File(dirMcVer, mcVer);
-
-        if (!file1.exists())
-        {
-            showMessageVersionNotFound(mcVer);
-            throw new RuntimeException("QUIET");
-        }
-        else
-        {
-            File file2 = new File(dirMcVer, mcVerOf);
-            file2.mkdirs();
-            Utils.dbg("Dir version MC: " + file1);
-            Utils.dbg("Dir version MC-OF: " + file2);
-            File file3 = new File(file1, mcVer + ".jar");
-            File file4 = new File(file2, mcVerOf + ".jar");
-
-            if (!file3.exists())
-            {
-                showMessageVersionNotFound(mcVer);
-                throw new RuntimeException("QUIET");
-            }
-            else
-            {
-                Utils.copyFile(file3, file4);
-                File file5 = new File(file1, mcVer + ".json");
-                File file6 = new File(file2, mcVerOf + ".json");
-                Utils.copyFile(file5, file6);
-            }
-        }
-    }
-
-    private static void showMessageVersionNotFound(String mcVer)
-    {
-        Utils.showErrorMessage("Cannot find Minecraft " + mcVer + ".\nYou must download and start Minecraft " + mcVer + " once in the official launcher.");
-    }
-
-    public static String getOptiFineVersion() throws IOException
-    {
-        InputStream inputstream = Installer.class.getResourceAsStream("/net/optifine/Config.class");
-
-        if (inputstream == null)
-        {
-            inputstream = Installer.class.getResourceAsStream("/Config.class");
-        }
-
-        if (inputstream == null)
-        {
-            inputstream = Installer.class.getResourceAsStream("/VersionThread.class");
-        }
-
-        if (inputstream == null)
-        {
-            throw new IOException("OptiFine version not found");
-        }
-        else
-        {
-            return getOptiFineVersion(inputstream);
-        }
-    }
-
-    public static String getOptiFineVersion(ZipFile zipFile) throws IOException
-    {
-        ZipEntry zipentry = zipFile.getEntry("net/optifine/Config.class");
-
-        if (zipentry == null)
-        {
-            zipentry = zipFile.getEntry("Config.class");
-        }
-
-        if (zipentry == null)
-        {
-            zipentry = zipFile.getEntry("VersionThread.class");
-        }
-
-        if (zipentry == null)
-        {
-            throw new IOException("OptiFine version not found");
-        }
-        else
-        {
-            InputStream inputstream = zipFile.getInputStream(zipentry);
-            String s = getOptiFineVersion(inputstream);
-            inputstream.close();
-            return s;
-        }
-    }
-
-    public static String getOptiFineVersion(InputStream in) throws IOException
-    {
-        byte[] abyte = Utils.readAll(in);
-        byte[] abyte1 = "OptiFine_".getBytes("ASCII");
-        int i = Utils.find(abyte, abyte1);
-
-        if (i < 0)
-        {
-            return null;
-        }
-        else
-        {
-            for (i = i; i < abyte.length; ++i)
-            {
-                byte b0 = abyte[i];
-
-                if (b0 < 32 || b0 > 122)
-                {
-                    break;
-                }
-            }
-
-            String s = new String(abyte, i, i - i, "ASCII");
-            return s;
-        }
-    }
-
-    public static String getMinecraftVersionFromOfVersion(String ofVer)
-    {
-        if (ofVer == null)
-        {
-            return null;
-        }
-        else
-        {
-            String[] astring = Utils.tokenize(ofVer, "_");
-
-            if (astring.length < 2)
-            {
-                return null;
-            }
-            else
-            {
-                String s = astring[1];
-                return s;
-            }
-        }
-    }
-
-    private static String getLaunchwrapperVersion() throws IOException
-    {
-        String s = "/launchwrapper-of.txt";
-        InputStream inputstream = Installer.class.getResourceAsStream(s);
-
-        if (inputstream == null)
-        {
-            throw new IOException("File not found: " + s);
-        }
-        else
-        {
-            String s1 = Utils.readText(inputstream, "ASCII");
-            s1 = s1.trim();
-
-            if (!s1.matches("[0-9\\.]+"))
-            {
-                throw new IOException("Invalid launchwrapper version: " + s1);
-            }
-            else
-            {
-                return s1;
-            }
-        }
-    }
-}
diff --git a/src/minecraft/optifine/InstallerFrame.java b/src/minecraft/optifine/InstallerFrame.java
deleted file mode 100644
index 48b1cbf..0000000
--- a/src/minecraft/optifine/InstallerFrame.java
+++ /dev/null
@@ -1,581 +0,0 @@
-package optifine;
-
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Font;
-import java.awt.Insets;
-import java.awt.LayoutManager;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.io.File;
-import javax.swing.JButton;
-import javax.swing.JFileChooser;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
-import javax.swing.JTextField;
-import javax.swing.UIManager;
-
-public class InstallerFrame extends JFrame
-{
-    private JLabel ivjLabelOfVersion = null;
-    private JLabel ivjLabelMcVersion = null;
-    private JPanel ivjPanelCenter = null;
-    private JButton ivjButtonInstall = null;
-    private JButton ivjButtonClose = null;
-    private JPanel ivjPanelBottom = null;
-    private JPanel ivjPanelContentPane = null;
-    InstallerFrame.IvjEventHandler ivjEventHandler = new InstallerFrame.IvjEventHandler();
-    private JTextArea ivjTextArea = null;
-    private JButton ivjButtonExtract = null;
-    private JLabel ivjLabelFolder = null;
-    private JTextField ivjFieldFolder = null;
-    private JButton ivjButtonFolder = null;
-
-    public InstallerFrame()
-    {
-        this.initialize();
-    }
-
-    private void customInit()
-    {
-        try
-        {
-            this.pack();
-            this.setDefaultCloseOperation(3);
-            File file1 = Utils.getWorkingDirectory();
-            this.getFieldFolder().setText(file1.getPath());
-            this.getButtonInstall().setEnabled(false);
-            this.getButtonExtract().setEnabled(false);
-            String s = Installer.getOptiFineVersion();
-            Utils.dbg("OptiFine Version: " + s);
-            String[] astring = Utils.tokenize(s, "_");
-            String s1 = astring[1];
-            Utils.dbg("Minecraft Version: " + s1);
-            String s2 = Installer.getOptiFineEdition(astring);
-            Utils.dbg("OptiFine Edition: " + s2);
-            String s3 = s2.replace("_", " ");
-            s3 = s3.replace(" U ", " Ultra ");
-            s3 = s3.replace("L ", "Light ");
-            this.getLabelOfVersion().setText("OptiFine " + s3);
-            this.getLabelMcVersion().setText("for Minecraft " + s1);
-            this.getButtonInstall().setEnabled(true);
-            this.getButtonExtract().setEnabled(true);
-            this.getButtonInstall().requestFocus();
-
-            if (!Installer.isPatchFile())
-            {
-                this.getButtonExtract().setVisible(false);
-            }
-        }
-        catch (Exception exception)
-        {
-            exception.printStackTrace();
-        }
-    }
-
-    public static void main(String[] args)
-    {
-        try
-        {
-            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-            InstallerFrame installerframe = new InstallerFrame();
-            Utils.centerWindow(installerframe, (Component)null);
-            installerframe.show();
-        }
-        catch (Exception exception)
-        {
-            String s = exception.getMessage();
-
-            if (s != null && s.equals("QUIET"))
-            {
-                return;
-            }
-
-            exception.printStackTrace();
-            String s1 = Utils.getExceptionStackTrace(exception);
-            s1 = s1.replace("\t", "  ");
-            JTextArea jtextarea = new JTextArea(s1);
-            jtextarea.setEditable(false);
-            Font font = jtextarea.getFont();
-            Font font1 = new Font("Monospaced", font.getStyle(), font.getSize());
-            jtextarea.setFont(font1);
-            JScrollPane jscrollpane = new JScrollPane(jtextarea);
-            jscrollpane.setPreferredSize(new Dimension(600, 400));
-            JOptionPane.showMessageDialog((Component)null, jscrollpane, "Error", 0);
-        }
-    }
-
-    private void handleException(Throwable e)
-    {
-        String s = e.getMessage();
-
-        if (s == null || !s.equals("QUIET"))
-        {
-            e.printStackTrace();
-            String s1 = Utils.getExceptionStackTrace(e);
-            s1 = s1.replace("\t", "  ");
-            JTextArea jtextarea = new JTextArea(s1);
-            jtextarea.setEditable(false);
-            Font font = jtextarea.getFont();
-            Font font1 = new Font("Monospaced", font.getStyle(), font.getSize());
-            jtextarea.setFont(font1);
-            JScrollPane jscrollpane = new JScrollPane(jtextarea);
-            jscrollpane.setPreferredSize(new Dimension(600, 400));
-            JOptionPane.showMessageDialog((Component)null, jscrollpane, "Error", 0);
-        }
-    }
-
-    private JLabel getLabelOfVersion()
-    {
-        if (this.ivjLabelOfVersion == null)
-        {
-            try
-            {
-                this.ivjLabelOfVersion = new JLabel();
-                this.ivjLabelOfVersion.setName("LabelOfVersion");
-                this.ivjLabelOfVersion.setBounds(2, 5, 385, 42);
-                this.ivjLabelOfVersion.setFont(new Font("Dialog", 1, 18));
-                this.ivjLabelOfVersion.setHorizontalAlignment(0);
-                this.ivjLabelOfVersion.setPreferredSize(new Dimension(385, 42));
-                this.ivjLabelOfVersion.setText("OptiFine ...");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjLabelOfVersion;
-    }
-
-    private JLabel getLabelMcVersion()
-    {
-        if (this.ivjLabelMcVersion == null)
-        {
-            try
-            {
-                this.ivjLabelMcVersion = new JLabel();
-                this.ivjLabelMcVersion.setName("LabelMcVersion");
-                this.ivjLabelMcVersion.setBounds(2, 38, 385, 25);
-                this.ivjLabelMcVersion.setFont(new Font("Dialog", 1, 14));
-                this.ivjLabelMcVersion.setHorizontalAlignment(0);
-                this.ivjLabelMcVersion.setPreferredSize(new Dimension(385, 25));
-                this.ivjLabelMcVersion.setText("for Minecraft ...");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjLabelMcVersion;
-    }
-
-    private JPanel getPanelCenter()
-    {
-        if (this.ivjPanelCenter == null)
-        {
-            try
-            {
-                this.ivjPanelCenter = new JPanel();
-                this.ivjPanelCenter.setName("PanelCenter");
-                this.ivjPanelCenter.setLayout((LayoutManager)null);
-                this.ivjPanelCenter.add(this.getLabelOfVersion(), this.getLabelOfVersion().getName());
-                this.ivjPanelCenter.add(this.getLabelMcVersion(), this.getLabelMcVersion().getName());
-                this.ivjPanelCenter.add(this.getTextArea(), this.getTextArea().getName());
-                this.ivjPanelCenter.add(this.getLabelFolder(), this.getLabelFolder().getName());
-                this.ivjPanelCenter.add(this.getFieldFolder(), this.getFieldFolder().getName());
-                this.ivjPanelCenter.add(this.getButtonFolder(), this.getButtonFolder().getName());
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjPanelCenter;
-    }
-
-    private JButton getButtonInstall()
-    {
-        if (this.ivjButtonInstall == null)
-        {
-            try
-            {
-                this.ivjButtonInstall = new JButton();
-                this.ivjButtonInstall.setName("ButtonInstall");
-                this.ivjButtonInstall.setPreferredSize(new Dimension(100, 26));
-                this.ivjButtonInstall.setText("Install");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjButtonInstall;
-    }
-
-    private JButton getButtonClose()
-    {
-        if (this.ivjButtonClose == null)
-        {
-            try
-            {
-                this.ivjButtonClose = new JButton();
-                this.ivjButtonClose.setName("ButtonClose");
-                this.ivjButtonClose.setPreferredSize(new Dimension(100, 26));
-                this.ivjButtonClose.setText("Cancel");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjButtonClose;
-    }
-
-    private JPanel getPanelBottom()
-    {
-        if (this.ivjPanelBottom == null)
-        {
-            try
-            {
-                this.ivjPanelBottom = new JPanel();
-                this.ivjPanelBottom.setName("PanelBottom");
-                this.ivjPanelBottom.setLayout(new FlowLayout(1, 15, 10));
-                this.ivjPanelBottom.setPreferredSize(new Dimension(390, 55));
-                this.ivjPanelBottom.add(this.getButtonInstall(), this.getButtonInstall().getName());
-                this.ivjPanelBottom.add(this.getButtonExtract(), this.getButtonExtract().getName());
-                this.ivjPanelBottom.add(this.getButtonClose(), this.getButtonClose().getName());
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjPanelBottom;
-    }
-
-    private JPanel getPanelContentPane()
-    {
-        if (this.ivjPanelContentPane == null)
-        {
-            try
-            {
-                this.ivjPanelContentPane = new JPanel();
-                this.ivjPanelContentPane.setName("PanelContentPane");
-                this.ivjPanelContentPane.setLayout(new BorderLayout(5, 5));
-                this.ivjPanelContentPane.setPreferredSize(new Dimension(394, 203));
-                this.ivjPanelContentPane.add(this.getPanelCenter(), "Center");
-                this.ivjPanelContentPane.add(this.getPanelBottom(), "South");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjPanelContentPane;
-    }
-
-    private void initialize()
-    {
-        try
-        {
-            this.setName("InstallerFrame");
-            this.setSize(404, 236);
-            this.setDefaultCloseOperation(0);
-            this.setResizable(false);
-            this.setTitle("OptiFine Installer");
-            this.setContentPane(this.getPanelContentPane());
-            this.initConnections();
-        }
-        catch (Throwable throwable)
-        {
-            this.handleException(throwable);
-        }
-
-        this.customInit();
-    }
-
-    public void onInstall()
-    {
-        try
-        {
-            File file1 = new File(this.getFieldFolder().getText());
-
-            if (!file1.exists())
-            {
-                Utils.showErrorMessage("Folder not found: " + file1.getPath());
-                return;
-            }
-
-            if (!file1.isDirectory())
-            {
-                Utils.showErrorMessage("Not a folder: " + file1.getPath());
-                return;
-            }
-
-            Installer.doInstall(file1);
-            Utils.showMessage("OptiFine is successfully installed.");
-            this.dispose();
-        }
-        catch (Exception exception)
-        {
-            this.handleException(exception);
-        }
-    }
-
-    public void onExtract()
-    {
-        try
-        {
-            File file1 = new File(this.getFieldFolder().getText());
-
-            if (!file1.exists())
-            {
-                Utils.showErrorMessage("Folder not found: " + file1.getPath());
-                return;
-            }
-
-            if (!file1.isDirectory())
-            {
-                Utils.showErrorMessage("Not a folder: " + file1.getPath());
-                return;
-            }
-
-            boolean flag = Installer.doExtract(file1);
-
-            if (flag)
-            {
-                Utils.showMessage("OptiFine is successfully extracted.");
-                this.dispose();
-            }
-        }
-        catch (Exception exception)
-        {
-            this.handleException(exception);
-        }
-    }
-
-    public void onClose()
-    {
-        this.dispose();
-    }
-
-    private void connEtoC1(ActionEvent arg1)
-    {
-        try
-        {
-            this.onInstall();
-        }
-        catch (Throwable throwable)
-        {
-            this.handleException(throwable);
-        }
-    }
-
-    private void connEtoC2(ActionEvent arg1)
-    {
-        try
-        {
-            this.onClose();
-        }
-        catch (Throwable throwable)
-        {
-            this.handleException(throwable);
-        }
-    }
-
-    private void initConnections() throws Exception
-    {
-        this.getButtonFolder().addActionListener(this.ivjEventHandler);
-        this.getButtonInstall().addActionListener(this.ivjEventHandler);
-        this.getButtonExtract().addActionListener(this.ivjEventHandler);
-        this.getButtonClose().addActionListener(this.ivjEventHandler);
-    }
-
-    private JTextArea getTextArea()
-    {
-        if (this.ivjTextArea == null)
-        {
-            try
-            {
-                this.ivjTextArea = new JTextArea();
-                this.ivjTextArea.setName("TextArea");
-                this.ivjTextArea.setBounds(15, 66, 365, 44);
-                this.ivjTextArea.setEditable(false);
-                this.ivjTextArea.setEnabled(true);
-                this.ivjTextArea.setFont(new Font("Dialog", 0, 12));
-                this.ivjTextArea.setLineWrap(true);
-                this.ivjTextArea.setOpaque(false);
-                this.ivjTextArea.setPreferredSize(new Dimension(365, 44));
-                this.ivjTextArea.setText("This installer will install OptiFine in the official Minecraft launcher and will create a new profile \"OptiFine\" for it.");
-                this.ivjTextArea.setWrapStyleWord(true);
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjTextArea;
-    }
-
-    private JButton getButtonExtract()
-    {
-        if (this.ivjButtonExtract == null)
-        {
-            try
-            {
-                this.ivjButtonExtract = new JButton();
-                this.ivjButtonExtract.setName("ButtonExtract");
-                this.ivjButtonExtract.setPreferredSize(new Dimension(100, 26));
-                this.ivjButtonExtract.setText("Extract");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjButtonExtract;
-    }
-
-    private void connEtoC3(ActionEvent arg1)
-    {
-        try
-        {
-            this.onExtract();
-        }
-        catch (Throwable throwable)
-        {
-            this.handleException(throwable);
-        }
-    }
-
-    private JLabel getLabelFolder()
-    {
-        if (this.ivjLabelFolder == null)
-        {
-            try
-            {
-                this.ivjLabelFolder = new JLabel();
-                this.ivjLabelFolder.setName("LabelFolder");
-                this.ivjLabelFolder.setBounds(15, 116, 47, 16);
-                this.ivjLabelFolder.setPreferredSize(new Dimension(47, 16));
-                this.ivjLabelFolder.setText("Folder");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjLabelFolder;
-    }
-
-    private JTextField getFieldFolder()
-    {
-        if (this.ivjFieldFolder == null)
-        {
-            try
-            {
-                this.ivjFieldFolder = new JTextField();
-                this.ivjFieldFolder.setName("FieldFolder");
-                this.ivjFieldFolder.setBounds(62, 114, 287, 20);
-                this.ivjFieldFolder.setEditable(false);
-                this.ivjFieldFolder.setPreferredSize(new Dimension(287, 20));
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjFieldFolder;
-    }
-
-    private JButton getButtonFolder()
-    {
-        if (this.ivjButtonFolder == null)
-        {
-            try
-            {
-                this.ivjButtonFolder = new JButton();
-                this.ivjButtonFolder.setName("ButtonFolder");
-                this.ivjButtonFolder.setBounds(350, 114, 25, 20);
-                this.ivjButtonFolder.setMargin(new Insets(2, 2, 2, 2));
-                this.ivjButtonFolder.setPreferredSize(new Dimension(25, 20));
-                this.ivjButtonFolder.setText("...");
-            }
-            catch (Throwable throwable)
-            {
-                this.handleException(throwable);
-            }
-        }
-
-        return this.ivjButtonFolder;
-    }
-
-    public void onFolderSelect()
-    {
-        File file1 = new File(this.getFieldFolder().getText());
-        JFileChooser jfilechooser = new JFileChooser(file1);
-        jfilechooser.setFileSelectionMode(1);
-        jfilechooser.setAcceptAllFileFilterUsed(false);
-
-        if (jfilechooser.showOpenDialog(this) == 0)
-        {
-            File file2 = jfilechooser.getSelectedFile();
-            this.getFieldFolder().setText(file2.getPath());
-        }
-    }
-
-    private void connEtoC4(ActionEvent arg1)
-    {
-        try
-        {
-            this.onFolderSelect();
-        }
-        catch (Throwable throwable)
-        {
-            this.handleException(throwable);
-        }
-    }
-
-    class IvjEventHandler implements ActionListener
-    {
-        public void actionPerformed(ActionEvent e)
-        {
-            if (e.getSource() == InstallerFrame.this.getButtonClose())
-            {
-                InstallerFrame.this.connEtoC2(e);
-            }
-
-            if (e.getSource() == InstallerFrame.this.getButtonExtract())
-            {
-                InstallerFrame.this.connEtoC3(e);
-            }
-
-            if (e.getSource() == InstallerFrame.this.getButtonFolder())
-            {
-                InstallerFrame.this.connEtoC4(e);
-            }
-
-            if (e.getSource() == InstallerFrame.this.getButtonInstall())
-            {
-                InstallerFrame.this.connEtoC1(e);
-            }
-        }
-    }
-}
diff --git a/src/minecraft/optifine/OptiFineClassTransformer.java b/src/minecraft/optifine/OptiFineClassTransformer.java
deleted file mode 100644
index cb4b955..0000000
--- a/src/minecraft/optifine/OptiFineClassTransformer.java
+++ /dev/null
@@ -1,209 +0,0 @@
-package optifine;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URI;
-import java.net.URL;
-import java.util.Map;
-import java.util.regex.Pattern;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import net.minecraft.launchwrapper.IClassTransformer;
-
-public class OptiFineClassTransformer implements IClassTransformer, IResourceProvider, IOptiFineResourceLocator
-{
-    private ZipFile ofZipFile = null;
-    private Map<String, String> patchMap = null;
-    private Pattern[] patterns = null;
-    public static OptiFineClassTransformer instance = null;
-
-    public OptiFineClassTransformer()
-    {
-        instance = this;
-
-        try
-        {
-            dbg("OptiFine ClassTransformer");
-            URL url = OptiFineClassTransformer.class.getProtectionDomain().getCodeSource().getLocation();
-            URI uri = url.toURI();
-            File file1 = new File(uri);
-            this.ofZipFile = new ZipFile(file1);
-            dbg("OptiFine ZIP file: " + file1);
-            this.patchMap = Patcher.getConfigurationMap(this.ofZipFile);
-            this.patterns = Patcher.getConfigurationPatterns(this.patchMap);
-            OptiFineResourceLocator.setResourceLocator(this);
-        }
-        catch (Exception exception)
-        {
-            exception.printStackTrace();
-        }
-
-        if (this.ofZipFile == null)
-        {
-            dbg("*** Can not find the OptiFine JAR in the classpath ***");
-            dbg("*** OptiFine will not be loaded! ***");
-        }
-    }
-
-    public byte[] transform(String name, String transformedName, byte[] bytes)
-    {
-        String s = name + ".class";
-        byte[] abyte = this.getOptiFineResource(s);
-        return abyte != null ? abyte : bytes;
-    }
-
-    public synchronized InputStream getOptiFineResourceStream(String name)
-    {
-        name = Utils.removePrefix(name, "/");
-        byte[] abyte = this.getOptiFineResource(name);
-
-        if (abyte == null)
-        {
-            return null;
-        }
-        else
-        {
-            ByteArrayInputStream bytearrayinputstream = new ByteArrayInputStream(abyte);
-            return bytearrayinputstream;
-        }
-    }
-
-    public InputStream getResourceStream(String path)
-    {
-        path = Utils.ensurePrefix(path, "/");
-        return this.getClass().getResourceAsStream(path);
-    }
-
-    public synchronized byte[] getOptiFineResource(String name)
-    {
-        name = Utils.removePrefix(name, "/");
-        byte[] abyte = this.getOptiFineResourceZip(name);
-
-        if (abyte != null)
-        {
-            return abyte;
-        }
-        else
-        {
-            abyte = this.getOptiFineResourcePatched(name, this);
-            return abyte != null ? abyte : null;
-        }
-    }
-
-    public synchronized byte[] getOptiFineResourceZip(String name)
-    {
-        if (this.ofZipFile == null)
-        {
-            return null;
-        }
-        else
-        {
-            name = Utils.removePrefix(name, "/");
-            ZipEntry zipentry = this.ofZipFile.getEntry(name);
-
-            if (zipentry == null)
-            {
-                return null;
-            }
-            else
-            {
-                try
-                {
-                    InputStream inputstream = this.ofZipFile.getInputStream(zipentry);
-                    byte[] abyte = readAll(inputstream);
-                    inputstream.close();
-
-                    if ((long)abyte.length != zipentry.getSize())
-                    {
-                        dbg("Invalid size, name: " + name + ", zip: " + zipentry.getSize() + ", stream: " + abyte.length);
-                        return null;
-                    }
-                    else
-                    {
-                        return abyte;
-                    }
-                }
-                catch (IOException ioexception)
-                {
-                    ioexception.printStackTrace();
-                    return null;
-                }
-            }
-        }
-    }
-
-    public synchronized byte[] getOptiFineResourcePatched(String name, IResourceProvider resourceProvider)
-    {
-        if (this.patterns != null && this.patchMap != null && resourceProvider != null)
-        {
-            name = Utils.removePrefix(name, "/");
-            String s = "patch/" + name + ".xdelta";
-            byte[] abyte = this.getOptiFineResourceZip(s);
-
-            if (abyte == null)
-            {
-                return null;
-            }
-            else
-            {
-                try
-                {
-                    byte[] abyte1 = Patcher.applyPatch(name, abyte, this.patterns, this.patchMap, resourceProvider);
-                    String s1 = "patch/" + name + ".md5";
-                    byte[] abyte2 = this.getOptiFineResourceZip(s1);
-
-                    if (abyte2 != null)
-                    {
-                        String s2 = new String(abyte2, "ASCII");
-                        byte[] abyte3 = HashUtils.getHashMd5(abyte1);
-                        String s3 = HashUtils.toHexString(abyte3);
-
-                        if (!s2.equals(s3))
-                        {
-                            throw new IOException("MD5 not matching, name: " + name + ", saved: " + s2 + ", patched: " + s3);
-                        }
-                    }
-
-                    return abyte1;
-                }
-                catch (Exception exception)
-                {
-                    exception.printStackTrace();
-                    return null;
-                }
-            }
-        }
-        else
-        {
-            return null;
-        }
-    }
-
-    public static byte[] readAll(InputStream is) throws IOException
-    {
-        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
-        byte[] abyte = new byte[1024];
-
-        while (true)
-        {
-            int i = is.read(abyte);
-
-            if (i < 0)
-            {
-                is.close();
-                byte[] abyte1 = bytearrayoutputstream.toByteArray();
-                return abyte1;
-            }
-
-            bytearrayoutputstream.write(abyte, 0, i);
-        }
-    }
-
-    private static void dbg(String str)
-    {
-        System.out.println(str);
-    }
-}
diff --git a/src/minecraft/optifine/OptiFineForgeTweaker.java b/src/minecraft/optifine/OptiFineForgeTweaker.java
deleted file mode 100644
index 465aa3a..0000000
--- a/src/minecraft/optifine/OptiFineForgeTweaker.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package optifine;
-
-import java.io.File;
-import java.util.List;
-import net.minecraft.launchwrapper.ITweaker;
-import net.minecraft.launchwrapper.LaunchClassLoader;
-
-public class OptiFineForgeTweaker implements ITweaker
-{
-    public void acceptOptions(List<String> args, File gameDir, File assetsDir, String profile)
-    {
-        dbg("OptiFineForgeTweaker: acceptOptions");
-    }
-
-    public void injectIntoClassLoader(LaunchClassLoader classLoader)
-    {
-        if (LaunchUtils.isForgeServer())
-        {
-            dbg("OptiFineForgeTweaker: Forge server detected, skipping class transformer");
-        }
-        else
-        {
-            dbg("OptiFineForgeTweaker: injectIntoClassLoader");
-            classLoader.registerTransformer("optifine.OptiFineClassTransformer");
-        }
-    }
-
-    public String getLaunchTarget()
-    {
-        dbg("OptiFineForgeTweaker: getLaunchTarget");
-        return "net.minecraft.client.main.Main";
-    }
-
-    public String[] getLaunchArguments()
-    {
-        dbg("OptiFineForgeTweaker: getLaunchArguments");
-        return new String[0];
-    }
-
-    private static void dbg(String str)
-    {
-        System.out.println(str);
-    }
-}
diff --git a/src/minecraft/optifine/OptiFineTransformationService.java b/src/minecraft/optifine/OptiFineTransformationService.java
deleted file mode 100644
index f1920c6..0000000
--- a/src/minecraft/optifine/OptiFineTransformationService.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package optifine;
-
-import cpw.mods.modlauncher.api.IEnvironment;
-import cpw.mods.modlauncher.api.ITransformationService;
-import cpw.mods.modlauncher.api.ITransformer;
-import cpw.mods.modlauncher.api.IncompatibleEnvironmentException;
-import java.io.File;
-import java.io.IOException;
-import java.net.URI;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Optional;
-import java.util.Set;
-import java.util.AbstractMap.SimpleEntry;
-import java.util.Map.Entry;
-import java.util.function.Function;
-import java.util.function.Supplier;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-public class OptiFineTransformationService implements ITransformationService
-{
-    private static final Logger LOGGER = LogManager.getLogger();
-    private static URL ofZipFileUrl;
-    private static ZipFile ofZipFile;
-    private static OptiFineTransformer transformer;
-
-    public String name()
-    {
-        return "OptiFine";
-    }
-
-    public void initialize(IEnvironment environment)
-    {
-        LOGGER.info("OptiFineTransformationService.initialize");
-    }
-
-    public void beginScanning(IEnvironment environment)
-    {
-    }
-
-    public void onLoad(IEnvironment env, Set<String> otherServices) throws IncompatibleEnvironmentException
-    {
-        LOGGER.info("OptiFineTransformationService.onLoad");
-        ofZipFileUrl = OptiFineTransformer.class.getProtectionDomain().getCodeSource().getLocation();
-
-        try
-        {
-            URI uri = ofZipFileUrl.toURI();
-            File file1 = new File(uri);
-            ofZipFile = new ZipFile(file1);
-            LOGGER.info("OptiFine ZIP file: " + file1);
-            transformer = new OptiFineTransformer(ofZipFile, env);
-            OptiFineResourceLocator.setResourceLocator(transformer);
-        }
-        catch (Exception exception)
-        {
-            LOGGER.error((String)("Error loading OptiFine ZIP file: " + ofZipFileUrl), (Throwable)exception);
-            throw new IncompatibleEnvironmentException("Error loading OptiFine ZIP file: " + ofZipFileUrl);
-        }
-    }
-
-    public Entry<Set<String>, Supplier<Function<String, Optional<URL>>>> additionalResourcesLocator()
-    {
-        return super.additionalResourcesLocator();
-    }
-
-    public Entry<Set<String>, Supplier<Function<String, Optional<URL>>>> additionalClassesLocator()
-    {
-        Set<String> set = new HashSet();
-        set.add("net.optifine.");
-        set.add("optifine.");
-        Supplier<Function<String, Optional<URL>>> supplier = () ->
-        {
-            return this::getResourceUrl;
-        };
-        Entry<Set<String>, Supplier<Function<String, Optional<URL>>>> entry = new SimpleEntry(set, supplier);
-        LOGGER.info("additionalClassesLocator: " + set);
-        return entry;
-    }
-
-    public Optional<URL> getResourceUrl(String name)
-    {
-        if (name.endsWith(".class") && !name.startsWith("optifine/"))
-        {
-            name = "srg/" + name;
-        }
-
-        if (transformer == null)
-        {
-            return Optional.<URL>empty();
-        }
-        else
-        {
-            ZipEntry zipentry = ofZipFile.getEntry(name);
-
-            if (zipentry == null)
-            {
-                return Optional.<URL>empty();
-            }
-            else
-            {
-                try
-                {
-                    String string = ofZipFileUrl.toExternalForm();
-                    URL url = new URL("jar:" + string + "!/" + name);
-                    return Optional.<URL>of(url);
-                }
-                catch (IOException ioexception)
-                {
-                    LOGGER.error((Object)ioexception);
-                    return Optional.<URL>empty();
-                }
-            }
-        }
-    }
-
-    public List<ITransformer> transformers()
-    {
-        LOGGER.info("OptiFineTransformationService.transformers");
-        List<ITransformer> list = new ArrayList();
-
-        if (transformer != null)
-        {
-            list.add(transformer);
-        }
-
-        return list;
-    }
-
-    public static OptiFineTransformer getTransformer()
-    {
-        return transformer;
-    }
-}
diff --git a/src/minecraft/optifine/OptiFineTransformer.java b/src/minecraft/optifine/OptiFineTransformer.java
deleted file mode 100644
index 8655beb..0000000
--- a/src/minecraft/optifine/OptiFineTransformer.java
+++ /dev/null
@@ -1,344 +0,0 @@
-package optifine;
-
-import cpw.mods.modlauncher.api.IEnvironment;
-import cpw.mods.modlauncher.api.ITransformer;
-import cpw.mods.modlauncher.api.ITransformerVotingContext;
-import cpw.mods.modlauncher.api.TransformerVoteResult;
-import cpw.mods.modlauncher.api.IEnvironment.Keys;
-import cpw.mods.modlauncher.api.ITransformer.Target;
-import cpw.mods.modlauncher.api.TypesafeMap.Key;
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Enumeration;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.regex.Pattern;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.tree.ClassNode;
-
-public class OptiFineTransformer implements ITransformer<ClassNode>, IResourceProvider, IOptiFineResourceLocator
-{
-    private static final Logger LOGGER = LogManager.getLogger();
-    private ZipFile ofZipFile;
-    private Map<String, String> patchMap = null;
-    private Pattern[] patterns = null;
-    public static final String PREFIX_SRG = "srg/";
-    public static final String SUFFIX_CLASS = ".class";
-    public static final String PREFIX_PATCH_SRG = "patch/srg/";
-    public static final String SUFFIX_CLASS_XDELTA = ".class.xdelta";
-    public static final String PREFIX_OPTIFINE = "optifine/";
-    private final boolean hasTargetPreClass;
-
-    public OptiFineTransformer(ZipFile ofZipFile, IEnvironment env)
-    {
-        this.ofZipFile = ofZipFile;
-        this.hasTargetPreClass = hasTargetPreClass(env);
-
-        if (this.hasTargetPreClass)
-        {
-            LOGGER.info("Target.PRE_CLASS is available");
-        }
-        else
-        {
-            LOGGER.info("Target.PRE_CLASS is not available");
-        }
-
-        try
-        {
-            this.patchMap = Patcher.getConfigurationMap(ofZipFile);
-            this.patterns = Patcher.getConfigurationPatterns(this.patchMap);
-        }
-        catch (IOException ioexception)
-        {
-            ioexception.printStackTrace();
-        }
-    }
-
-    public TransformerVoteResult castVote(ITransformerVotingContext context)
-    {
-        return TransformerVoteResult.YES;
-    }
-
-    public Set<Target> targets()
-    {
-        Set<Target> set = new HashSet();
-        String[] astring = this.getResourceNames("srg/", ".class");
-        String[] astring1 = this.getResourceNames("patch/srg/", ".class.xdelta");
-        astring = (String[])Utils.addObjectsToArray(astring, astring1);
-
-        for (int i = 0; i < astring.length; ++i)
-        {
-            String s = astring[i];
-            s = Utils.removePrefix(s, new String[] {"srg/", "patch/srg/"});
-            s = Utils.removeSuffix(s, new String[] {".class", ".class.xdelta"});
-
-            if (!s.startsWith("net/optifine/"))
-            {
-                Target target = this.getTargetClass(s);
-                set.add(target);
-            }
-        }
-
-        LOGGER.info("Targets: " + set.size());
-        return set;
-    }
-
-    private Target getTargetClass(String name)
-    {
-        return this.hasTargetPreClass ? this.getTargetPreClass(name) : Target.targetClass(name);
-    }
-
-    private Target getTargetPreClass(String name)
-    {
-        return Target.targetPreClass(name);
-    }
-
-    private static boolean hasTargetPreClass(IEnvironment env)
-    {
-        Optional<String> optional = env.getProperty((Key)Keys.MLSPEC_VERSION.get());
-
-        if (!optional.isPresent())
-        {
-            return false;
-        }
-        else
-        {
-            String[] astring = Utils.tokenize((String)optional.get(), ".");
-
-            if (astring.length <= 0)
-            {
-                return false;
-            }
-            else
-            {
-                String s = astring[0];
-                int i = Utils.parseInt(s, -1);
-                return i >= 7;
-            }
-        }
-    }
-
-    public ClassNode transform(ClassNode input, ITransformerVotingContext context)
-    {
-        ClassNode classnode = input;
-        String s = context.getClassName();
-        String s1 = s.replace('.', '/');
-        byte[] abyte = this.getOptiFineResource("srg/" + s1 + ".class");
-
-        if (abyte != null)
-        {
-            InputStream inputstream = new ByteArrayInputStream(abyte);
-            ClassNode classnode1 = this.loadClass(inputstream);
-
-            if (classnode1 != null)
-            {
-                this.debugClass(classnode1);
-                AccessFixer.fixMemberAccess(input, classnode1);
-                classnode = classnode1;
-            }
-        }
-
-        return classnode;
-    }
-
-    private void debugClass(ClassNode classNode)
-    {
-    }
-
-    private ClassNode loadClass(InputStream in)
-    {
-        try
-        {
-            ClassReader classreader = new ClassReader(in);
-            ClassNode classnode = new ClassNode(393216);
-            classreader.accept(classnode, 0);
-            return classnode;
-        }
-        catch (IOException ioexception)
-        {
-            ioexception.printStackTrace();
-            return null;
-        }
-    }
-
-    private String[] getResourceNames(String prefix, String suffix)
-    {
-        List<String> list = new ArrayList();
-        Enumeration <? extends ZipEntry > enumeration = this.ofZipFile.entries();
-
-        while (enumeration.hasMoreElements())
-        {
-            ZipEntry zipentry = (ZipEntry)enumeration.nextElement();
-            String s = zipentry.getName();
-
-            if (s.startsWith(prefix) && s.endsWith(suffix))
-            {
-                list.add(s);
-            }
-        }
-
-        String[] astring = (String[])list.toArray(new String[list.size()]);
-        return astring;
-    }
-
-    private byte[] getOptiFineResource(String name)
-    {
-        try
-        {
-            InputStream inputstream = this.getOptiFineResourceStream(name);
-
-            if (inputstream == null)
-            {
-                return null;
-            }
-            else
-            {
-                byte[] abyte = Utils.readAll(inputstream);
-                inputstream.close();
-                return abyte;
-            }
-        }
-        catch (IOException ioexception)
-        {
-            ioexception.printStackTrace();
-            return null;
-        }
-    }
-
-    public synchronized InputStream getOptiFineResourceStream(String name)
-    {
-        name = Utils.removePrefix(name, "/");
-        InputStream inputstream = this.getOptiFineResourceStreamZip(name);
-
-        if (inputstream != null)
-        {
-            return inputstream;
-        }
-        else
-        {
-            inputstream = this.getOptiFineResourceStreamPatched(name);
-            return inputstream != null ? inputstream : null;
-        }
-    }
-
-    public InputStream getResourceStream(String path)
-    {
-        path = Utils.ensurePrefix(path, "/");
-        return this.getClass().getResourceAsStream(path);
-    }
-
-    public synchronized InputStream getOptiFineResourceStreamZip(String name)
-    {
-        if (this.ofZipFile == null)
-        {
-            return null;
-        }
-        else
-        {
-            name = Utils.removePrefix(name, "/");
-            ZipEntry zipentry = this.ofZipFile.getEntry(name);
-
-            if (zipentry == null)
-            {
-                return null;
-            }
-            else
-            {
-                try
-                {
-                    InputStream inputstream = this.ofZipFile.getInputStream(zipentry);
-                    return inputstream;
-                }
-                catch (IOException ioexception)
-                {
-                    ioexception.printStackTrace();
-                    return null;
-                }
-            }
-        }
-    }
-
-    public synchronized byte[] getOptiFineResourceZip(String name)
-    {
-        InputStream inputstream = this.getOptiFineResourceStreamZip(name);
-
-        if (inputstream == null)
-        {
-            return null;
-        }
-        else
-        {
-            try
-            {
-                byte[] abyte = Utils.readAll(inputstream);
-                return abyte;
-            }
-            catch (IOException var4)
-            {
-                return null;
-            }
-        }
-    }
-
-    public synchronized InputStream getOptiFineResourceStreamPatched(String name)
-    {
-        byte[] abyte = this.getOptiFineResourcePatched(name);
-        return abyte == null ? null : new ByteArrayInputStream(abyte);
-    }
-
-    public synchronized byte[] getOptiFineResourcePatched(String name)
-    {
-        if (this.patterns != null && this.patchMap != null)
-        {
-            name = Utils.removePrefix(name, "/");
-            String s = "patch/" + name + ".xdelta";
-            byte[] abyte = this.getOptiFineResourceZip(s);
-
-            if (abyte == null)
-            {
-                return null;
-            }
-            else
-            {
-                try
-                {
-                    byte[] abyte1 = Patcher.applyPatch(name, abyte, this.patterns, this.patchMap, this);
-                    String s1 = "patch/" + name + ".md5";
-                    byte[] abyte2 = this.getOptiFineResourceZip(s1);
-
-                    if (abyte2 != null)
-                    {
-                        String s2 = new String(abyte2, "ASCII");
-                        byte[] abyte3 = HashUtils.getHashMd5(abyte1);
-                        String s3 = HashUtils.toHexString(abyte3);
-
-                        if (!s2.equals(s3))
-                        {
-                            throw new IOException("MD5 not matching, name: " + name + ", saved: " + s2 + ", patched: " + s3);
-                        }
-                    }
-
-                    return abyte1;
-                }
-                catch (Exception exception)
-                {
-                    exception.printStackTrace();
-                    return null;
-                }
-            }
-        }
-        else
-        {
-            return null;
-        }
-    }
-}
diff --git a/src/minecraft/optifine/OptiFineTweaker.java b/src/minecraft/optifine/OptiFineTweaker.java
deleted file mode 100644
index fd7356a..0000000
--- a/src/minecraft/optifine/OptiFineTweaker.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package optifine;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import net.minecraft.launchwrapper.ITweaker;
-import net.minecraft.launchwrapper.LaunchClassLoader;
-
-public class OptiFineTweaker implements ITweaker
-{
-    private List<String> args;
-
-    public void acceptOptions(List<String> args, File gameDir, File assetsDir, String profile)
-    {
-        dbg("OptiFineTweaker: acceptOptions");
-        this.args = new ArrayList(args);
-        this.args.add("--gameDir");
-        this.args.add(gameDir.getAbsolutePath());
-        this.args.add("--assetsDir");
-        this.args.add(assetsDir.getAbsolutePath());
-        this.args.add("--version");
-        this.args.add(profile);
-    }
-
-    public void injectIntoClassLoader(LaunchClassLoader classLoader)
-    {
-        dbg("OptiFineTweaker: injectIntoClassLoader");
-        classLoader.registerTransformer("optifine.OptiFineClassTransformer");
-    }
-
-    public String getLaunchTarget()
-    {
-        dbg("OptiFineTweaker: getLaunchTarget");
-        return "net.minecraft.client.main.Main";
-    }
-
-    public String[] getLaunchArguments()
-    {
-        dbg("OptiFineTweaker: getLaunchArguments");
-        return (String[])this.args.toArray(new String[this.args.size()]);
-    }
-
-    private static void dbg(String str)
-    {
-        System.out.println(str);
-    }
-}
diff --git a/src/minecraft/optifine/Patcher.java b/src/minecraft/optifine/Patcher.java
deleted file mode 100644
index 057b00c..0000000
--- a/src/minecraft/optifine/Patcher.java
+++ /dev/null
@@ -1,244 +0,0 @@
-package optifine;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Enumeration;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import java.util.zip.ZipOutputStream;
-import optifine.xdelta.GDiffPatcher;
-import optifine.xdelta.PatchException;
-
-public class Patcher
-{
-    public static final String CONFIG_FILE = "patch.cfg";
-    public static final String CONFIG_FILE2 = "patch2.cfg";
-    public static final String CONFIG_FILE3 = "patch3.cfg";
-    public static final String PREFIX_PATCH = "patch/";
-    public static final String SUFFIX_DELTA = ".xdelta";
-    public static final String SUFFIX_MD5 = ".md5";
-
-    public static void main(String[] args) throws Exception
-    {
-        if (args.length < 3)
-        {
-            Utils.dbg("Usage: Patcher <base.jar> <diff.jar> <mod.jar>");
-        }
-        else
-        {
-            File file1 = new File(args[0]);
-            File file2 = new File(args[1]);
-            File file3 = new File(args[2]);
-
-            if (file1.getName().equals("AUTO"))
-            {
-                file1 = Differ.detectBaseFile(file2);
-            }
-
-            if (file1.exists() && file1.isFile())
-            {
-                if (file2.exists() && file2.isFile())
-                {
-                    process(file1, file2, file3);
-                }
-                else
-                {
-                    throw new IOException("Diff file not found: " + file3);
-                }
-            }
-            else
-            {
-                throw new IOException("Base file not found: " + file1);
-            }
-        }
-    }
-
-    public static void process(File baseFile, File diffFile, File modFile) throws Exception
-    {
-        ZipFile zipfile = new ZipFile(diffFile);
-        Map<String, String> map = getConfigurationMap(zipfile);
-        Pattern[] apattern = getConfigurationPatterns(map);
-        ZipOutputStream zipoutputstream = new ZipOutputStream(new FileOutputStream(modFile));
-        ZipFile zipfile1 = new ZipFile(baseFile);
-        ZipResourceProvider zipresourceprovider = new ZipResourceProvider(zipfile1);
-        Enumeration enumeration = zipfile.entries();
-
-        while (enumeration.hasMoreElements())
-        {
-            ZipEntry zipentry = (ZipEntry)enumeration.nextElement();
-            InputStream inputstream = zipfile.getInputStream(zipentry);
-            byte[] abyte = Utils.readAll(inputstream);
-            String s = zipentry.getName();
-
-            if (s.startsWith("patch/") && s.endsWith(".xdelta"))
-            {
-                s = s.substring("patch/".length());
-                s = s.substring(0, s.length() - ".xdelta".length());
-                byte[] abyte3 = applyPatch(s, abyte, apattern, map, zipresourceprovider);
-                String s1 = "patch/" + s + ".md5";
-                ZipEntry zipentry2 = zipfile.getEntry(s1);
-
-                if (zipentry2 != null)
-                {
-                    byte[] abyte1 = Utils.readAll(zipfile.getInputStream(zipentry2));
-                    String s2 = new String(abyte1, "ASCII");
-                    byte[] abyte2 = HashUtils.getHashMd5(abyte3);
-                    String s3 = HashUtils.toHexString(abyte2);
-
-                    if (!s2.equals(s3))
-                    {
-                        throw new Exception("MD5 not matching, name: " + s + ", saved: " + s2 + ", patched: " + s3);
-                    }
-                }
-
-                ZipEntry zipentry3 = new ZipEntry(s);
-                zipoutputstream.putNextEntry(zipentry3);
-                zipoutputstream.write(abyte3);
-                zipoutputstream.closeEntry();
-                Utils.dbg("Mod: " + s);
-            }
-            else if (!s.startsWith("patch/") || !s.endsWith(".md5"))
-            {
-                ZipEntry zipentry1 = new ZipEntry(s);
-                zipoutputstream.putNextEntry(zipentry1);
-                zipoutputstream.write(abyte);
-                zipoutputstream.closeEntry();
-                Utils.dbg("Same: " + zipentry1.getName());
-            }
-        }
-
-        zipoutputstream.close();
-    }
-
-    public static byte[] applyPatch(String name, byte[] bytesDiff, Pattern[] patterns, Map<String, String> cfgMap, IResourceProvider resourceProvider) throws IOException, PatchException
-    {
-        name = Utils.removePrefix(name, "/");
-        String s = getPatchBase(name, patterns, cfgMap);
-
-        if (s == null)
-        {
-            throw new IOException("No patch base, name: " + name + ", patterns: " + Utils.arrayToCommaSeparatedString(patterns));
-        }
-        else
-        {
-            InputStream inputstream = resourceProvider.getResourceStream(s);
-
-            if (inputstream == null)
-            {
-                throw new IOException("Base resource not found: " + s);
-            }
-            else
-            {
-                byte[] abyte = Utils.readAll(inputstream);
-                InputStream inputstream1 = new ByteArrayInputStream(bytesDiff);
-                ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
-                new GDiffPatcher(abyte, inputstream1, bytearrayoutputstream);
-                bytearrayoutputstream.close();
-                return bytearrayoutputstream.toByteArray();
-            }
-        }
-    }
-
-    public static Pattern[] getConfigurationPatterns(Map<String, String> cfgMap)
-    {
-        String[] astring = (String[])cfgMap.keySet().toArray(new String[0]);
-        Pattern[] apattern = new Pattern[astring.length];
-
-        for (int i = 0; i < astring.length; ++i)
-        {
-            String s = astring[i];
-            apattern[i] = Pattern.compile(s);
-        }
-
-        return apattern;
-    }
-
-    public static Map<String, String> getConfigurationMap(ZipFile modZip) throws IOException
-    {
-        Map<String, String> map = getConfigurationMap(modZip, "patch.cfg");
-        Map<String, String> map1 = getConfigurationMap(modZip, "patch2.cfg");
-        Map<String, String> map2 = getConfigurationMap(modZip, "patch3.cfg");
-        map.putAll(map1);
-        map.putAll(map2);
-        return map;
-    }
-
-    public static Map<String, String> getConfigurationMap(ZipFile modZip, String pathConfig) throws IOException
-    {
-        Map<String, String> map = new LinkedHashMap();
-
-        if (modZip == null)
-        {
-            return map;
-        }
-        else
-        {
-            ZipEntry zipentry = modZip.getEntry(pathConfig);
-
-            if (zipentry == null)
-            {
-                return map;
-            }
-            else
-            {
-                InputStream inputstream = modZip.getInputStream(zipentry);
-                String[] astring = Utils.readLines(inputstream, "ASCII");
-                inputstream.close();
-
-                for (int i = 0; i < astring.length; ++i)
-                {
-                    String s = astring[i].trim();
-
-                    if (!s.startsWith("#") && s.length() > 0)
-                    {
-                        String[] astring1 = Utils.tokenize(s, "=");
-
-                        if (astring1.length != 2)
-                        {
-                            throw new IOException("Invalid patch configuration: " + s);
-                        }
-
-                        String s1 = astring1[0].trim();
-                        String s2 = astring1[1].trim();
-                        map.put(s1, s2);
-                    }
-                }
-
-                return map;
-            }
-        }
-    }
-
-    public static String getPatchBase(String name, Pattern[] patterns, Map<String, String> cfgMap)
-    {
-        name = Utils.removePrefix(name, "/");
-
-        for (int i = 0; i < patterns.length; ++i)
-        {
-            Pattern pattern = patterns[i];
-            Matcher matcher = pattern.matcher(name);
-
-            if (matcher.matches())
-            {
-                String s = (String)cfgMap.get(pattern.pattern());
-
-                if (s != null && s.trim().equals("*"))
-                {
-                    return name;
-                }
-
-                return s;
-            }
-        }
-
-        return null;
-    }
-}
diff --git a/src/minecraft/optifine/Utils.java b/src/minecraft/optifine/Utils.java
index 196c3bb..e2feb97 100644
--- a/src/minecraft/optifine/Utils.java
+++ b/src/minecraft/optifine/Utils.java
@@ -38,7 +38,7 @@ public class Utils
         String s = System.getProperty("user.home", ".");
         File file1 = null;
 
-        switch ($SWITCH_TABLE$optifine$Utils$OS()[getPlatform().ordinal()])
+        switch (Utils.getPlatform().ordinal())
         {
             case 1:
             case 2:
diff --git a/src/minecraft/optifine/json/JSONValue.java b/src/minecraft/optifine/json/JSONValue.java
index 58ecb8d..79b724b 100644
--- a/src/minecraft/optifine/json/JSONValue.java
+++ b/src/minecraft/optifine/json/JSONValue.java
@@ -165,15 +165,15 @@ public class JSONValue
 
             if (c0 >= 0 && c0 <= 31 || c0 >= 127 && c0 <= 159 || c0 >= 8192 && c0 <= 8447)
             {
-                String s = Integer.toHexString(c0);
+                String s1 = Integer.toHexString(c0);
                 sb.append("\\u");
 
-                for (int j = 0; j < 4 - s.length(); ++j)
+                for (int j = 0; j < 4 - s1.length(); ++j)
                 {
                     sb.append('0');
                 }
 
-                sb.append(s.toUpperCase());
+                sb.append(s1.toUpperCase());
             }
             else
             {
diff --git a/src/minecraft/optifine/json/JSONWriter.java b/src/minecraft/optifine/json/JSONWriter.java
index 74e8d1b..257d01d 100644
--- a/src/minecraft/optifine/json/JSONWriter.java
+++ b/src/minecraft/optifine/json/JSONWriter.java
@@ -75,7 +75,7 @@ public class JSONWriter
     {
         this.writeLine("{");
         this.indentAdd();
-        Set set = jObj.keySet();
+        Set<String> set = jObj.keySet();
         int i = set.size();
         int j = 0;
 
-- 
2.35.3

